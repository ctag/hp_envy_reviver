
envyRescue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008ddc  08008ddc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ddc  08008ddc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  200001e0  08008fc4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000151c  08008fc4  0002151c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014921  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ee  00000000  00000000  00034b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00037d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00038988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e77  00000000  00000000  00039490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc63  00000000  00000000  00053307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ec6  00000000  00000000  00062f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9e30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  000e9e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008d0c 	.word	0x08008d0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008d0c 	.word	0x08008d0c

0800014c <cdc_recv>:
uint16_t uart_len = 0;
uint8_t cdc_recv_flag = 0;


void cdc_recv()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	while (cdc_recv_flag != 1);
 8000150:	bf00      	nop
 8000152:	4b05      	ldr	r3, [pc, #20]	; (8000168 <cdc_recv+0x1c>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d1fb      	bne.n	8000152 <cdc_recv+0x6>
	cdc_recv_flag = 0;
 800015a:	4b03      	ldr	r3, [pc, #12]	; (8000168 <cdc_recv+0x1c>)
 800015c:	2200      	movs	r2, #0
 800015e:	701a      	strb	r2, [r3, #0]
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200002fe 	.word	0x200002fe

0800016c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000172:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char uart_sel = '0';
 8000174:	2330      	movs	r3, #48	; 0x30
 8000176:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	int uart_buf_len;
	char spi_buf[0x100] = {0};
 800017a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	3304      	adds	r3, #4
 8000184:	22fc      	movs	r2, #252	; 0xfc
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f008 f98b 	bl	80084a4 <memset>
	uint8_t addr;
	uint8_t wip;
	uint8_t usb_res = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000194:	f000 fc94 	bl	8000ac0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000198:	f000 fa9a 	bl	80006d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800019c:	f000 fb26 	bl	80007ec <MX_GPIO_Init>
	MX_SPI1_Init();
 80001a0:	f000 faee 	bl	8000780 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80001a4:	f007 fc88 	bl	8007ab8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	// CS pin should default high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2110      	movs	r1, #16
 80001ac:	48a9      	ldr	r0, [pc, #676]	; (8000454 <main+0x2e8>)
 80001ae:	f000 ff9f 	bl	80010f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b8:	48a7      	ldr	r0, [pc, #668]	; (8000458 <main+0x2ec>)
 80001ba:	f000 ff99 	bl	80010f0 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		cdc_recv();
 80001be:	f7ff ffc5 	bl	800014c <cdc_recv>
		uart_sel = uart_buf[0];
 80001c2:	4ba6      	ldr	r3, [pc, #664]	; (800045c <main+0x2f0>)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	48a1      	ldr	r0, [pc, #644]	; (8000458 <main+0x2ec>)
 80001d2:	f000 ff8d 	bl	80010f0 <HAL_GPIO_WritePin>

		switch(uart_sel) {
 80001d6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80001da:	3b64      	subs	r3, #100	; 0x64
 80001dc:	2b0f      	cmp	r3, #15
 80001de:	f200 825b 	bhi.w	8000698 <main+0x52c>
 80001e2:	a201      	add	r2, pc, #4	; (adr r2, 80001e8 <main+0x7c>)
 80001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e8:	080002c3 	.word	0x080002c3
 80001ec:	080003b5 	.word	0x080003b5
 80001f0:	08000699 	.word	0x08000699
 80001f4:	08000699 	.word	0x08000699
 80001f8:	08000699 	.word	0x08000699
 80001fc:	08000229 	.word	0x08000229
 8000200:	08000699 	.word	0x08000699
 8000204:	08000699 	.word	0x08000699
 8000208:	08000699 	.word	0x08000699
 800020c:	08000699 	.word	0x08000699
 8000210:	08000699 	.word	0x08000699
 8000214:	08000699 	.word	0x08000699
 8000218:	08000481 	.word	0x08000481
 800021c:	08000699 	.word	0x08000699
 8000220:	08000699 	.word	0x08000699
 8000224:	0800026b 	.word	0x0800026b
		case 'i': // Read RDID register
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2110      	movs	r1, #16
 800022c:	4889      	ldr	r0, [pc, #548]	; (8000454 <main+0x2e8>)
 800022e:	f000 ff5f 	bl	80010f0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&ID_READ, 1, 100);
 8000232:	2364      	movs	r3, #100	; 0x64
 8000234:	2201      	movs	r2, #1
 8000236:	498a      	ldr	r1, [pc, #552]	; (8000460 <main+0x2f4>)
 8000238:	488a      	ldr	r0, [pc, #552]	; (8000464 <main+0x2f8>)
 800023a:	f003 f959 	bl	80034f0 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 3, 100);
 800023e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000242:	2364      	movs	r3, #100	; 0x64
 8000244:	2203      	movs	r2, #3
 8000246:	4887      	ldr	r0, [pc, #540]	; (8000464 <main+0x2f8>)
 8000248:	f003 fa8e 	bl	8003768 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	2110      	movs	r1, #16
 8000250:	4880      	ldr	r0, [pc, #512]	; (8000454 <main+0x2e8>)
 8000252:	f000 ff4d 	bl	80010f0 <HAL_GPIO_WritePin>

			usb_res = CDC_Transmit_FS((uint8_t *)spi_buf, 3);
 8000256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800025a:	2103      	movs	r1, #3
 800025c:	4618      	mov	r0, r3
 800025e:	f007 fd0b 	bl	8007c78 <CDC_Transmit_FS>
 8000262:	4603      	mov	r3, r0
 8000264:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			//	      HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
			break;
 8000268:	e217      	b.n	800069a <main+0x52e>
		case 's': // Read STATUS register
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	2110      	movs	r1, #16
 800026e:	4879      	ldr	r0, [pc, #484]	; (8000454 <main+0x2e8>)
 8000270:	f000 ff3e 	bl	80010f0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ_STATUS, 1, 100);
 8000274:	2364      	movs	r3, #100	; 0x64
 8000276:	2201      	movs	r2, #1
 8000278:	497b      	ldr	r1, [pc, #492]	; (8000468 <main+0x2fc>)
 800027a:	487a      	ldr	r0, [pc, #488]	; (8000464 <main+0x2f8>)
 800027c:	f003 f938 	bl	80034f0 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000280:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	2201      	movs	r2, #1
 8000288:	4876      	ldr	r0, [pc, #472]	; (8000464 <main+0x2f8>)
 800028a:	f003 fa6d 	bl	8003768 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4870      	ldr	r0, [pc, #448]	; (8000454 <main+0x2e8>)
 8000294:	f000 ff2c 	bl	80010f0 <HAL_GPIO_WritePin>

			uart_buf_len = sprintf(uart_buf, "%c", spi_buf[0]);
 8000298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4972      	ldr	r1, [pc, #456]	; (800046c <main+0x300>)
 80002a2:	486e      	ldr	r0, [pc, #440]	; (800045c <main+0x2f0>)
 80002a4:	f008 f906 	bl	80084b4 <siprintf>
 80002a8:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			usb_res = CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 80002ac:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	4619      	mov	r1, r3
 80002b4:	4869      	ldr	r0, [pc, #420]	; (800045c <main+0x2f0>)
 80002b6:	f007 fcdf 	bl	8007c78 <CDC_Transmit_FS>
 80002ba:	4603      	mov	r3, r0
 80002bc:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			//			  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
			break;
 80002c0:	e1eb      	b.n	800069a <main+0x52e>
		case 'd': // Dump all data
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2110      	movs	r1, #16
 80002c6:	4863      	ldr	r0, [pc, #396]	; (8000454 <main+0x2e8>)
 80002c8:	f000 ff12 	bl	80010f0 <HAL_GPIO_WritePin>
			uint8_t cmd[4] = {0x00};
 80002cc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
			cmd[0] = READ_DATA;
 80002d4:	2203      	movs	r2, #3
 80002d6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80002da:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&cmd, 4, 100);
 80002dc:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80002e0:	2364      	movs	r3, #100	; 0x64
 80002e2:	2204      	movs	r2, #4
 80002e4:	485f      	ldr	r0, [pc, #380]	; (8000464 <main+0x2f8>)
 80002e6:	f003 f903 	bl	80034f0 <HAL_SPI_Transmit>
			unsigned char next_in;

			//			HAL_UART_Receive(&huart1, &next_in, 1, 300);
			uart_buf_len = sprintf(uart_buf, "d");
 80002ea:	4961      	ldr	r1, [pc, #388]	; (8000470 <main+0x304>)
 80002ec:	485b      	ldr	r0, [pc, #364]	; (800045c <main+0x2f0>)
 80002ee:	f008 f8e1 	bl	80084b4 <siprintf>
 80002f2:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			usb_res = CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 80002f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	4857      	ldr	r0, [pc, #348]	; (800045c <main+0x2f0>)
 8000300:	f007 fcba 	bl	8007c78 <CDC_Transmit_FS>
 8000304:	4603      	mov	r3, r0
 8000306:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			cdc_recv();
 800030a:	f7ff ff1f 	bl	800014c <cdc_recv>
			next_in = uart_buf[0];
 800030e:	4b53      	ldr	r3, [pc, #332]	; (800045c <main+0x2f0>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

			if (next_in == 'n') {
 8000316:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800031a:	2b6e      	cmp	r3, #110	; 0x6e
 800031c:	d11f      	bne.n	800035e <main+0x1f2>
				while(next_in == 'n')
 800031e:	e019      	b.n	8000354 <main+0x1e8>
				{
					next_in = 'z'; // Ensure that the next command actually arrives, instead of being left over.
 8000320:	237a      	movs	r3, #122	; 0x7a
 8000322:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
					HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 0x1, 800);
 8000326:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800032a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800032e:	2201      	movs	r2, #1
 8000330:	484c      	ldr	r0, [pc, #304]	; (8000464 <main+0x2f8>)
 8000332:	f003 fa19 	bl	8003768 <HAL_SPI_Receive>
					//		uart_buf_len = sprintf(uart_buf, "DATA: %d \t%x\r\n", i, spi_buf[i]);
					//					HAL_UART_Transmit(&huart1, (uint8_t *)spi_buf, 0x100, 800);
					//					HAL_UART_Receive(&huart1, &next_in, 1, 500);
					usb_res = CDC_Transmit_FS((uint8_t *)spi_buf, 0x1);
 8000336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800033a:	2101      	movs	r1, #1
 800033c:	4618      	mov	r0, r3
 800033e:	f007 fc9b 	bl	8007c78 <CDC_Transmit_FS>
 8000342:	4603      	mov	r3, r0
 8000344:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
					cdc_recv();
 8000348:	f7ff ff00 	bl	800014c <cdc_recv>
					next_in = uart_buf[0];
 800034c:	4b43      	ldr	r3, [pc, #268]	; (800045c <main+0x2f0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				while(next_in == 'n')
 8000354:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000358:	2b6e      	cmp	r3, #110	; 0x6e
 800035a:	d0e1      	beq.n	8000320 <main+0x1b4>
 800035c:	e024      	b.n	80003a8 <main+0x23c>
				}
			}
			else if (next_in == 'a') {
 800035e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000362:	2b61      	cmp	r3, #97	; 0x61
 8000364:	d120      	bne.n	80003a8 <main+0x23c>
				for (uint32_t i = 0; i < (0x800000/0x100); i++) {
 8000366:	2300      	movs	r3, #0
 8000368:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800036c:	e017      	b.n	800039e <main+0x232>
					HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 0x100, 800);
 800036e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000372:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800037a:	483a      	ldr	r0, [pc, #232]	; (8000464 <main+0x2f8>)
 800037c:	f003 f9f4 	bl	8003768 <HAL_SPI_Receive>
					//					HAL_UART_Transmit(&huart1, (uint8_t *)spi_buf, 0x100, 800);
					usb_res = CDC_Transmit_FS((uint8_t *)spi_buf, 0x100);
 8000380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000388:	4618      	mov	r0, r3
 800038a:	f007 fc75 	bl	8007c78 <CDC_Transmit_FS>
 800038e:	4603      	mov	r3, r0
 8000390:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
				for (uint32_t i = 0; i < (0x800000/0x100); i++) {
 8000394:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000398:	3301      	adds	r3, #1
 800039a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800039e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80003a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a6:	d3e2      	bcc.n	800036e <main+0x202>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2110      	movs	r1, #16
 80003ac:	4829      	ldr	r0, [pc, #164]	; (8000454 <main+0x2e8>)
 80003ae:	f000 fe9f 	bl	80010f0 <HAL_GPIO_WritePin>
			break;
 80003b2:	e172      	b.n	800069a <main+0x52e>
		case 'e': // Chip erase
			// Set the Write Enable latch
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	4826      	ldr	r0, [pc, #152]	; (8000454 <main+0x2e8>)
 80003ba:	f000 fe99 	bl	80010f0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE_EN, 1, 100);
 80003be:	2364      	movs	r3, #100	; 0x64
 80003c0:	2201      	movs	r2, #1
 80003c2:	492c      	ldr	r1, [pc, #176]	; (8000474 <main+0x308>)
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <main+0x2f8>)
 80003c6:	f003 f893 	bl	80034f0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2110      	movs	r1, #16
 80003ce:	4821      	ldr	r0, [pc, #132]	; (8000454 <main+0x2e8>)
 80003d0:	f000 fe8e 	bl	80010f0 <HAL_GPIO_WritePin>

			// Send the Chip Erase command
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2110      	movs	r1, #16
 80003d8:	481e      	ldr	r0, [pc, #120]	; (8000454 <main+0x2e8>)
 80003da:	f000 fe89 	bl	80010f0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&CHIP_ERASE, 1, 100);
 80003de:	2364      	movs	r3, #100	; 0x64
 80003e0:	2201      	movs	r2, #1
 80003e2:	4925      	ldr	r1, [pc, #148]	; (8000478 <main+0x30c>)
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <main+0x2f8>)
 80003e6:	f003 f883 	bl	80034f0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	4819      	ldr	r0, [pc, #100]	; (8000454 <main+0x2e8>)
 80003f0:	f000 fe7e 	bl	80010f0 <HAL_GPIO_WritePin>

			// Wait for the Write in Progress bit to be cleared
			do {
				HAL_Delay(10);
 80003f4:	200a      	movs	r0, #10
 80003f6:	f000 fbc5 	bl	8000b84 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2110      	movs	r1, #16
 80003fe:	4815      	ldr	r0, [pc, #84]	; (8000454 <main+0x2e8>)
 8000400:	f000 fe76 	bl	80010f0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ_STATUS, 1, 100);
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	2201      	movs	r2, #1
 8000408:	4917      	ldr	r1, [pc, #92]	; (8000468 <main+0x2fc>)
 800040a:	4816      	ldr	r0, [pc, #88]	; (8000464 <main+0x2f8>)
 800040c:	f003 f870 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000410:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000414:	2364      	movs	r3, #100	; 0x64
 8000416:	2201      	movs	r2, #1
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <main+0x2f8>)
 800041a:	f003 f9a5 	bl	8003768 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2110      	movs	r1, #16
 8000422:	480c      	ldr	r0, [pc, #48]	; (8000454 <main+0x2e8>)
 8000424:	f000 fe64 	bl	80010f0 <HAL_GPIO_WritePin>
			} while (spi_buf[0] != 0x40);
 8000428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b40      	cmp	r3, #64	; 0x40
 8000430:	d1e0      	bne.n	80003f4 <main+0x288>

			uart_buf_len = sprintf(uart_buf, "e");
 8000432:	4912      	ldr	r1, [pc, #72]	; (800047c <main+0x310>)
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <main+0x2f0>)
 8000436:	f008 f83d 	bl	80084b4 <siprintf>
 800043a:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			usb_res = CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 800043e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000442:	b29b      	uxth	r3, r3
 8000444:	4619      	mov	r1, r3
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <main+0x2f0>)
 8000448:	f007 fc16 	bl	8007c78 <CDC_Transmit_FS>
 800044c:	4603      	mov	r3, r0
 800044e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			break;
 8000452:	e122      	b.n	800069a <main+0x52e>
 8000454:	40010800 	.word	0x40010800
 8000458:	40011000 	.word	0x40011000
 800045c:	200001fc 	.word	0x200001fc
 8000460:	08008d90 	.word	0x08008d90
 8000464:	20000530 	.word	0x20000530
 8000468:	08008d93 	.word	0x08008d93
 800046c:	08008d24 	.word	0x08008d24
 8000470:	08008d28 	.word	0x08008d28
 8000474:	08008d94 	.word	0x08008d94
 8000478:	08008d95 	.word	0x08008d95
 800047c:	08008d2c 	.word	0x08008d2c
		case 'p': // Program chip

			// Ack that command was recv'ed
			uart_buf_len = sprintf(uart_buf, "p");
 8000480:	4989      	ldr	r1, [pc, #548]	; (80006a8 <main+0x53c>)
 8000482:	488a      	ldr	r0, [pc, #552]	; (80006ac <main+0x540>)
 8000484:	f008 f816 	bl	80084b4 <siprintf>
 8000488:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			usb_res = CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 800048c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000490:	b29b      	uxth	r3, r3
 8000492:	4619      	mov	r1, r3
 8000494:	4885      	ldr	r0, [pc, #532]	; (80006ac <main+0x540>)
 8000496:	f007 fbef 	bl	8007c78 <CDC_Transmit_FS>
 800049a:	4603      	mov	r3, r0
 800049c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c

			uint8_t addr3 = 0;
 80004a0:	f207 1303 	addw	r3, r7, #259	; 0x103
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
			uint8_t addr2 = 0;
 80004a8:	f507 7381 	add.w	r3, r7, #258	; 0x102
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
//			uint8_t addr1 = 0;
			const uint8_t addr1 = 0x00;
 80004b0:	f207 1301 	addw	r3, r7, #257	; 0x101
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
			uint8_t page[0x100] = {0x00};
 80004b8:	463b      	mov	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	3304      	adds	r3, #4
 80004c0:	22fc      	movs	r2, #252	; 0xfc
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f007 ffed 	bl	80084a4 <memset>
			unsigned char next = '\0';
 80004ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]

			// Recv if another page is coming
			cdc_recv();
 80004d2:	f7ff fe3b 	bl	800014c <cdc_recv>
			next = uart_buf[0];
 80004d6:	4b75      	ldr	r3, [pc, #468]	; (80006ac <main+0x540>)
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80004de:	701a      	strb	r2, [r3, #0]
			usb_res = CDC_Transmit_FS(&next, 1); // Ack
 80004e0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f007 fbc6 	bl	8007c78 <CDC_Transmit_FS>
 80004ec:	4603      	mov	r3, r0
 80004ee:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c

			do {
				// Recv Addr byte 3
				cdc_recv();
 80004f2:	f7ff fe2b 	bl	800014c <cdc_recv>
				addr3 = uart_buf[0];
 80004f6:	4b6d      	ldr	r3, [pc, #436]	; (80006ac <main+0x540>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	f207 1303 	addw	r3, r7, #259	; 0x103
 80004fe:	701a      	strb	r2, [r3, #0]
				usb_res = CDC_Transmit_FS(&addr3, 1); // Ack
 8000500:	f207 1303 	addw	r3, r7, #259	; 0x103
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fbb6 	bl	8007c78 <CDC_Transmit_FS>
 800050c:	4603      	mov	r3, r0
 800050e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c

				// Recv Addr byte 2
				cdc_recv();
 8000512:	f7ff fe1b 	bl	800014c <cdc_recv>
				addr2 = uart_buf[0];
 8000516:	4b65      	ldr	r3, [pc, #404]	; (80006ac <main+0x540>)
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	f507 7381 	add.w	r3, r7, #258	; 0x102
 800051e:	701a      	strb	r2, [r3, #0]
				usb_res = CDC_Transmit_FS(&addr2, 1); // Ack
 8000520:	f507 7381 	add.w	r3, r7, #258	; 0x102
 8000524:	2101      	movs	r1, #1
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fba6 	bl	8007c78 <CDC_Transmit_FS>
 800052c:	4603      	mov	r3, r0
 800052e:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
//				cdc_recv();
//				addr1 = uart_buf[0];
//				usb_res = CDC_Transmit_FS(&addr1, 1); // Ack

				// Gather page of data from host
				for (uint16_t i = 0; i < 0x100; i++) {
 8000532:	2300      	movs	r3, #0
 8000534:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000538:	e017      	b.n	800056a <main+0x3fe>
					cdc_recv();
 800053a:	f7ff fe07 	bl	800014c <cdc_recv>
					page[i] = uart_buf[0];
 800053e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000542:	4a5a      	ldr	r2, [pc, #360]	; (80006ac <main+0x540>)
 8000544:	7811      	ldrb	r1, [r2, #0]
 8000546:	463a      	mov	r2, r7
 8000548:	54d1      	strb	r1, [r2, r3]
					usb_res = CDC_Transmit_FS(&page[i], 1); // Ack
 800054a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800054e:	463a      	mov	r2, r7
 8000550:	4413      	add	r3, r2
 8000552:	2101      	movs	r1, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f007 fb8f 	bl	8007c78 <CDC_Transmit_FS>
 800055a:	4603      	mov	r3, r0
 800055c:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
				for (uint16_t i = 0; i < 0x100; i++) {
 8000560:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000564:	3301      	adds	r3, #1
 8000566:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800056a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800056e:	2bff      	cmp	r3, #255	; 0xff
 8000570:	d9e3      	bls.n	800053a <main+0x3ce>
//				cdc_recv();
//				page[0] = uart_buf[0];
//				usb_res = CDC_Transmit_FS(page, 1); // Ack

				// Set the Write Enable latch
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2110      	movs	r1, #16
 8000576:	484e      	ldr	r0, [pc, #312]	; (80006b0 <main+0x544>)
 8000578:	f000 fdba 	bl	80010f0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE_EN, 1, 100);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	2201      	movs	r2, #1
 8000580:	494c      	ldr	r1, [pc, #304]	; (80006b4 <main+0x548>)
 8000582:	484d      	ldr	r0, [pc, #308]	; (80006b8 <main+0x54c>)
 8000584:	f002 ffb4 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4848      	ldr	r0, [pc, #288]	; (80006b0 <main+0x544>)
 800058e:	f000 fdaf 	bl	80010f0 <HAL_GPIO_WritePin>

				// Program chip
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	4846      	ldr	r0, [pc, #280]	; (80006b0 <main+0x544>)
 8000598:	f000 fdaa 	bl	80010f0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)&PAGE_PROG, 1, 100);
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	2201      	movs	r2, #1
 80005a0:	4946      	ldr	r1, [pc, #280]	; (80006bc <main+0x550>)
 80005a2:	4845      	ldr	r0, [pc, #276]	; (80006b8 <main+0x54c>)
 80005a4:	f002 ffa4 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr3, 1, 100);
 80005a8:	f207 1103 	addw	r1, r7, #259	; 0x103
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2201      	movs	r2, #1
 80005b0:	4841      	ldr	r0, [pc, #260]	; (80006b8 <main+0x54c>)
 80005b2:	f002 ff9d 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr2, 1, 100);
 80005b6:	f507 7181 	add.w	r1, r7, #258	; 0x102
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	2201      	movs	r2, #1
 80005be:	483e      	ldr	r0, [pc, #248]	; (80006b8 <main+0x54c>)
 80005c0:	f002 ff96 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr1, 1, 100);
 80005c4:	f207 1101 	addw	r1, r7, #257	; 0x101
 80005c8:	2364      	movs	r3, #100	; 0x64
 80005ca:	2201      	movs	r2, #1
 80005cc:	483a      	ldr	r0, [pc, #232]	; (80006b8 <main+0x54c>)
 80005ce:	f002 ff8f 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t *)page, 0x100, 500);
 80005d2:	4639      	mov	r1, r7
 80005d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <main+0x54c>)
 80005de:	f002 ff87 	bl	80034f0 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2110      	movs	r1, #16
 80005e6:	4832      	ldr	r0, [pc, #200]	; (80006b0 <main+0x544>)
 80005e8:	f000 fd82 	bl	80010f0 <HAL_GPIO_WritePin>

				// Ack that page was sent
				uart_buf_len = sprintf(uart_buf, "s");
 80005ec:	4934      	ldr	r1, [pc, #208]	; (80006c0 <main+0x554>)
 80005ee:	482f      	ldr	r0, [pc, #188]	; (80006ac <main+0x540>)
 80005f0:	f007 ff60 	bl	80084b4 <siprintf>
 80005f4:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
				usb_res = CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 80005f8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <main+0x540>)
 8000602:	f007 fb39 	bl	8007c78 <CDC_Transmit_FS>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c

				// Wait for the Write in Progress bit to be cleared
				do {
					HAL_Delay(20);
 800060c:	2014      	movs	r0, #20
 800060e:	f000 fab9 	bl	8000b84 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2110      	movs	r1, #16
 8000616:	4826      	ldr	r0, [pc, #152]	; (80006b0 <main+0x544>)
 8000618:	f000 fd6a 	bl	80010f0 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ_STATUS, 1, 100);
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	2201      	movs	r2, #1
 8000620:	4928      	ldr	r1, [pc, #160]	; (80006c4 <main+0x558>)
 8000622:	4825      	ldr	r0, [pc, #148]	; (80006b8 <main+0x54c>)
 8000624:	f002 ff64 	bl	80034f0 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000628:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	2201      	movs	r2, #1
 8000630:	4821      	ldr	r0, [pc, #132]	; (80006b8 <main+0x54c>)
 8000632:	f003 f899 	bl	8003768 <HAL_SPI_Receive>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <main+0x544>)
 800063c:	f000 fd58 	bl	80010f0 <HAL_GPIO_WritePin>
				} while (spi_buf[0] != 0x40);
 8000640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b40      	cmp	r3, #64	; 0x40
 8000648:	d1e0      	bne.n	800060c <main+0x4a0>

				// Ack that command completed
				uart_buf_len = sprintf(uart_buf, "d");
 800064a:	491f      	ldr	r1, [pc, #124]	; (80006c8 <main+0x55c>)
 800064c:	4817      	ldr	r0, [pc, #92]	; (80006ac <main+0x540>)
 800064e:	f007 ff31 	bl	80084b4 <siprintf>
 8000652:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
				usb_res = CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000656:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800065a:	b29b      	uxth	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <main+0x540>)
 8000660:	f007 fb0a 	bl	8007c78 <CDC_Transmit_FS>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c

				// Recv if another page is coming
				cdc_recv();
 800066a:	f7ff fd6f 	bl	800014c <cdc_recv>
				next = uart_buf[0];
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <main+0x540>)
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000676:	701a      	strb	r2, [r3, #0]
				usb_res = CDC_Transmit_FS(&next, 1); // Ack
 8000678:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f007 fafa 	bl	8007c78 <CDC_Transmit_FS>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			} while (next == 'n');
 800068a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b6e      	cmp	r3, #110	; 0x6e
 8000692:	f43f af2e 	beq.w	80004f2 <main+0x386>

			break;
 8000696:	e000      	b.n	800069a <main+0x52e>
		default:
			//		  uart_buf_len = sprintf(uart_buf, "Bad input\n");
			//		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
			break;
 8000698:	bf00      	nop

		}


		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	480a      	ldr	r0, [pc, #40]	; (80006cc <main+0x560>)
 80006a2:	f000 fd25 	bl	80010f0 <HAL_GPIO_WritePin>
		cdc_recv();
 80006a6:	e58a      	b.n	80001be <main+0x52>
 80006a8:	08008d30 	.word	0x08008d30
 80006ac:	200001fc 	.word	0x200001fc
 80006b0:	40010800 	.word	0x40010800
 80006b4:	08008d94 	.word	0x08008d94
 80006b8:	20000530 	.word	0x20000530
 80006bc:	08008d96 	.word	0x08008d96
 80006c0:	08008d34 	.word	0x08008d34
 80006c4:	08008d93 	.word	0x08008d93
 80006c8:	08008d28 	.word	0x08008d28
 80006cc:	40011000 	.word	0x40011000

080006d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	2228      	movs	r2, #40	; 0x28
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 fee0 	bl	80084a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000710:	2300      	movs	r3, #0
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000714:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f9c4 	bl	8002aac <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x5e>
	{
		Error_Handler();
 800072a:	f000 f8b3 	bl	8000894 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fc2e 	bl	8002fac <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000756:	f000 f89d 	bl	8000894 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800075a:	2310      	movs	r3, #16
 800075c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fd88 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000772:	f000 f88f 	bl	8000894 <Error_Handler>
	}
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_SPI1_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007b4:	2228      	movs	r2, #40	; 0x28
 80007b6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007d2:	f002 fe09 	bl	80033e8 <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80007dc:	f000 f85a 	bl	8000894 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000530 	.word	0x20000530
 80007e8:	40013000 	.word	0x40013000

080007ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_GPIO_Init+0x9c>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <MX_GPIO_Init+0x9c>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_GPIO_Init+0x9c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_GPIO_Init+0x9c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <MX_GPIO_Init+0x9c>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0x9c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <MX_GPIO_Init+0xa0>)
 8000838:	f000 fc5a 	bl	80010f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000842:	f000 fc55 	bl	80010f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_GPIO_Init+0xa0>)
 8000860:	f000 fac2 	bl	8000de8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000864:	2310      	movs	r3, #16
 8000866:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0xa4>)
 800087c:	f000 fab4 	bl	8000de8 <HAL_GPIO_Init>

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	40011000 	.word	0x40011000
 8000890:	40010800 	.word	0x40010800

08000894 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_MspInit+0x5c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x5c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_MspInit+0x60>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_MspInit+0x60>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <HAL_SPI_MspInit+0x88>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d12f      	bne.n	8000984 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800092a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000968:	f000 fa3e 	bl	8000de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000980:	f000 fa32 	bl	8000de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013000 	.word	0x40013000
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f8b5 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009ee:	f000 fcc8 	bl	8001382 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20001220 	.word	0x20001220

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f007 fd02 	bl	8008434 <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20005000 	.word	0x20005000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	20000300 	.word	0x20000300
 8000a64:	20001520 	.word	0x20001520

08000a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a9a:	f7ff ffe5 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f007 fccf 	bl	8008440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fb63 	bl	800016c <main>
  bx lr
 8000aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000ab0:	08008de4 	.word	0x08008de4
  ldr r2, =_sbss
 8000ab4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000ab8:	2000151c 	.word	0x2000151c

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f947 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fee0 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f95f 	bl	8000dce <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 f927 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000588 	.word	0x20000588

08000b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	20000588 	.word	0x20000588

08000b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b8c:	f7ff fff0 	bl	8000b70 <HAL_GetTick>
 8000b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b9c:	d005      	beq.n	8000baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_Delay+0x44>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000baa:	bf00      	nop
 8000bac:	f7ff ffe0 	bl	8000b70 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d8f7      	bhi.n	8000bac <HAL_Delay+0x28>
  {
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4906      	ldr	r1, [pc, #24]	; (8000c64 <__NVIC_EnableIRQ+0x34>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d44:	f7ff ff90 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff2d 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff42 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff35 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	e169      	b.n	80010d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8158 	bne.w	80010ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a9a      	ldr	r2, [pc, #616]	; (8001088 <HAL_GPIO_Init+0x2a0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d05e      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e24:	4a98      	ldr	r2, [pc, #608]	; (8001088 <HAL_GPIO_Init+0x2a0>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d875      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e2a:	4a98      	ldr	r2, [pc, #608]	; (800108c <HAL_GPIO_Init+0x2a4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d058      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e30:	4a96      	ldr	r2, [pc, #600]	; (800108c <HAL_GPIO_Init+0x2a4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d86f      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e36:	4a96      	ldr	r2, [pc, #600]	; (8001090 <HAL_GPIO_Init+0x2a8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d052      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e3c:	4a94      	ldr	r2, [pc, #592]	; (8001090 <HAL_GPIO_Init+0x2a8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d869      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e42:	4a94      	ldr	r2, [pc, #592]	; (8001094 <HAL_GPIO_Init+0x2ac>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d04c      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e48:	4a92      	ldr	r2, [pc, #584]	; (8001094 <HAL_GPIO_Init+0x2ac>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d863      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e4e:	4a92      	ldr	r2, [pc, #584]	; (8001098 <HAL_GPIO_Init+0x2b0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d046      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e54:	4a90      	ldr	r2, [pc, #576]	; (8001098 <HAL_GPIO_Init+0x2b0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d85d      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d82a      	bhi.n	8000eb4 <HAL_GPIO_Init+0xcc>
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d859      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e62:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <HAL_GPIO_Init+0x80>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000ee3 	.word	0x08000ee3
 8000e6c:	08000ebd 	.word	0x08000ebd
 8000e70:	08000ecf 	.word	0x08000ecf
 8000e74:	08000f11 	.word	0x08000f11
 8000e78:	08000f17 	.word	0x08000f17
 8000e7c:	08000f17 	.word	0x08000f17
 8000e80:	08000f17 	.word	0x08000f17
 8000e84:	08000f17 	.word	0x08000f17
 8000e88:	08000f17 	.word	0x08000f17
 8000e8c:	08000f17 	.word	0x08000f17
 8000e90:	08000f17 	.word	0x08000f17
 8000e94:	08000f17 	.word	0x08000f17
 8000e98:	08000f17 	.word	0x08000f17
 8000e9c:	08000f17 	.word	0x08000f17
 8000ea0:	08000f17 	.word	0x08000f17
 8000ea4:	08000f17 	.word	0x08000f17
 8000ea8:	08000f17 	.word	0x08000f17
 8000eac:	08000ec5 	.word	0x08000ec5
 8000eb0:	08000ed9 	.word	0x08000ed9
 8000eb4:	4a79      	ldr	r2, [pc, #484]	; (800109c <HAL_GPIO_Init+0x2b4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eba:	e02c      	b.n	8000f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e029      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e024      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	623b      	str	r3, [r7, #32]
          break;
 8000ed6:	e01f      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	330c      	adds	r3, #12
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	e01a      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eea:	2304      	movs	r3, #4
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e013      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d105      	bne.n	8000f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	611a      	str	r2, [r3, #16]
          break;
 8000f02:	e009      	b.n	8000f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f04:	2308      	movs	r3, #8
 8000f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	615a      	str	r2, [r3, #20]
          break;
 8000f0e:	e003      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
          break;
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          break;
 8000f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d801      	bhi.n	8000f22 <HAL_GPIO_Init+0x13a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	e001      	b.n	8000f26 <HAL_GPIO_Init+0x13e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3304      	adds	r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2bff      	cmp	r3, #255	; 0xff
 8000f2c:	d802      	bhi.n	8000f34 <HAL_GPIO_Init+0x14c>
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x152>
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	3b08      	subs	r3, #8
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	210f      	movs	r1, #15
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	6a39      	ldr	r1, [r7, #32]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80b1 	beq.w	80010ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f80:	4a48      	ldr	r2, [pc, #288]	; (80010a4 <HAL_GPIO_Init+0x2bc>)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_GPIO_Init+0x2c0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d013      	beq.n	8000fd4 <HAL_GPIO_Init+0x1ec>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a3f      	ldr	r2, [pc, #252]	; (80010ac <HAL_GPIO_Init+0x2c4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a3e      	ldr	r2, [pc, #248]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d007      	beq.n	8000fcc <HAL_GPIO_Init+0x1e4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a3d      	ldr	r2, [pc, #244]	; (80010b4 <HAL_GPIO_Init+0x2cc>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d101      	bne.n	8000fc8 <HAL_GPIO_Init+0x1e0>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e006      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd8:	f002 0203 	and.w	r2, r2, #3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fe6:	492f      	ldr	r1, [pc, #188]	; (80010a4 <HAL_GPIO_Init+0x2bc>)
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	492c      	ldr	r1, [pc, #176]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	43db      	mvns	r3, r3
 8001016:	4928      	ldr	r1, [pc, #160]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001018:	4013      	ands	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4922      	ldr	r1, [pc, #136]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	43db      	mvns	r3, r3
 800103e:	491e      	ldr	r1, [pc, #120]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001040:	4013      	ands	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	4918      	ldr	r1, [pc, #96]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	43db      	mvns	r3, r3
 8001066:	4914      	ldr	r1, [pc, #80]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 8001068:	4013      	ands	r3, r2
 800106a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d021      	beq.n	80010bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	490e      	ldr	r1, [pc, #56]	; (80010b8 <HAL_GPIO_Init+0x2d0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
 8001084:	e021      	b.n	80010ca <HAL_GPIO_Init+0x2e2>
 8001086:	bf00      	nop
 8001088:	10320000 	.word	0x10320000
 800108c:	10310000 	.word	0x10310000
 8001090:	10220000 	.word	0x10220000
 8001094:	10210000 	.word	0x10210000
 8001098:	10120000 	.word	0x10120000
 800109c:	10110000 	.word	0x10110000
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	40010800 	.word	0x40010800
 80010ac:	40010c00 	.word	0x40010c00
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40011400 	.word	0x40011400
 80010b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_GPIO_Init+0x304>)
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <HAL_GPIO_Init+0x304>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	3301      	adds	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	fa22 f303 	lsr.w	r3, r2, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f47f ae8e 	bne.w	8000dfc <HAL_GPIO_Init+0x14>
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	372c      	adds	r7, #44	; 0x2c
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b08b      	sub	sp, #44	; 0x2c
 8001124:	af06      	add	r7, sp, #24
 8001126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0fd      	b.n	800132e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f006 feca 	bl	8007ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fed7 	bl	8003f0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	687e      	ldr	r6, [r7, #4]
 8001166:	466d      	mov	r5, sp
 8001168:	f106 0410 	add.w	r4, r6, #16
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	602b      	str	r3, [r5, #0]
 8001174:	1d33      	adds	r3, r6, #4
 8001176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f002 fea1 	bl	8003ec0 <USB_CoreInit>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2202      	movs	r2, #2
 8001188:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0ce      	b.n	800132e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fed2 	bl	8003f40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e04c      	b.n	800123c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3301      	adds	r3, #1
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	b298      	uxth	r0, r3
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3336      	adds	r3, #54	; 0x36
 80011e0:	4602      	mov	r2, r0
 80011e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3303      	adds	r3, #3
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	3338      	adds	r3, #56	; 0x38
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	333c      	adds	r3, #60	; 0x3c
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	3340      	adds	r3, #64	; 0x40
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	3301      	adds	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d3ad      	bcc.n	80011a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e044      	b.n	80012d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3301      	adds	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3b5      	bcc.n	800124c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	687e      	ldr	r6, [r7, #4]
 80012e8:	466d      	mov	r5, sp
 80012ea:	f106 0410 	add.w	r4, r6, #16
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	602b      	str	r3, [r5, #0]
 80012f6:	1d33      	adds	r3, r6, #4
 80012f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f002 fe2c 	bl	8003f58 <USB_DevInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00d      	b.n	800132e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f004 ff9d 	bl	8006266 <USB_DevDisconnect>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_PCD_Start+0x16>
 8001348:	2302      	movs	r3, #2
 800134a:	e016      	b.n	800137a <HAL_PCD_Start+0x44>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fdc1 	bl	8003ee0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f007 f830 	bl	80083c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f004 ff71 	bl	8006252 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f004 ff73 	bl	800627a <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800139e:	d102      	bne.n	80013a6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb61 	bl	8001a68 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 ff65 	bl	800627a <USB_ReadInterrupts>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d112      	bne.n	80013e2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f006 fdfe 	bl	8007fd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f925 	bl	800162c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 ff47 	bl	800627a <USB_ReadInterrupts>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013f6:	d10b      	bne.n	8001410 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001400:	b29a      	uxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800140a:	b292      	uxth	r2, r2
 800140c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f004 ff30 	bl	800627a <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001424:	d10b      	bne.n	800143e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f004 ff19 	bl	800627a <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001452:	d126      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0204 	bic.w	r2, r2, #4
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0208 	bic.w	r2, r2, #8
 800147e:	b292      	uxth	r2, r2
 8001480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f006 fddf 	bl	8008048 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800149c:	b292      	uxth	r2, r2
 800149e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fee7 	bl	800627a <USB_ReadInterrupts>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014b6:	f040 8084 	bne.w	80015c2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	77fb      	strb	r3, [r7, #31]
 80014be:	e011      	b.n	80014e4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	441a      	add	r2, r3
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	b292      	uxth	r2, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	f107 0120 	add.w	r1, r7, #32
 80014d8:	440b      	add	r3, r1
 80014da:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	3301      	adds	r3, #1
 80014e2:	77fb      	strb	r3, [r7, #31]
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	d9ea      	bls.n	80014c0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	b292      	uxth	r2, r2
 80014fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	b292      	uxth	r2, r2
 8001516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800151a:	bf00      	nop
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001524:	b29b      	uxth	r3, r3
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f6      	beq.n	800151c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	77fb      	strb	r3, [r7, #31]
 800154a:	e010      	b.n	800156e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4611      	mov	r1, r2
 8001554:	7ffa      	ldrb	r2, [r7, #31]
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	440a      	add	r2, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	f107 0120 	add.w	r1, r7, #32
 8001560:	440b      	add	r3, r1
 8001562:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001566:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	3301      	adds	r3, #1
 800156c:	77fb      	strb	r3, [r7, #31]
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	2b07      	cmp	r3, #7
 8001572:	d9eb      	bls.n	800154c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0208 	orr.w	r2, r2, #8
 8001586:	b292      	uxth	r2, r2
 8001588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159e:	b292      	uxth	r2, r2
 80015a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	b292      	uxth	r2, r2
 80015b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f006 fd29 	bl	8008014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fe57 	bl	800627a <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d6:	d10e      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f006 fce2 	bl	8007fba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fe3d 	bl	800627a <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800160a:	d10b      	bne.n	8001624 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161e:	b292      	uxth	r2, r2
 8001620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_PCD_SetAddress+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e013      	b.n	800166e <HAL_PCD_SetAddress+0x42>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fde4 	bl	800622c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4603      	mov	r3, r0
 8001686:	70fb      	strb	r3, [r7, #3]
 8001688:	460b      	mov	r3, r1
 800168a:	803b      	strh	r3, [r7, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da0e      	bge.n	80016ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	705a      	strb	r2, [r3, #1]
 80016b8:	e00e      	b.n	80016d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	f003 0207 	and.w	r2, r3, #7
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016e4:	883a      	ldrh	r2, [r7, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	78ba      	ldrb	r2, [r7, #2]
 80016ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001702:	78bb      	ldrb	r3, [r7, #2]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d102      	bne.n	800170e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_PCD_EP_Open+0xa6>
 8001718:	2302      	movs	r3, #2
 800171a:	e00e      	b.n	800173a <HAL_PCD_EP_Open+0xc4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fc34 	bl	8003f98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001738:	7afb      	ldrb	r3, [r7, #11]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800174e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001752:	2b00      	cmp	r3, #0
 8001754:	da0e      	bge.n	8001774 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	705a      	strb	r2, [r3, #1]
 8001772:	e00e      	b.n	8001792 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	f003 0207 	and.w	r2, r3, #7
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_PCD_EP_Close+0x6a>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e00e      	b.n	80017ca <HAL_PCD_EP_Close+0x88>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 ff56 	bl	800466c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	460b      	mov	r3, r1
 80017e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	f003 0207 	and.w	r2, r3, #7
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	b2da      	uxtb	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6979      	ldr	r1, [r7, #20]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f908 	bl	8004a44 <USB_EPStartXfer>
 8001834:	e005      	b.n	8001842 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 f901 	bl	8004a44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 0207 	and.w	r2, r3, #7
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2201      	movs	r2, #1
 80018c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 f8ae 	bl	8004a44 <USB_EPStartXfer>
 80018e8:	e005      	b.n	80018f6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f8a7 	bl	8004a44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d901      	bls.n	800191e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e04c      	b.n	80019b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800191e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da0e      	bge.n	8001944 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	705a      	strb	r2, [r3, #1]
 8001942:	e00c      	b.n	800195e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_PCD_EP_SetStall+0x7e>
 800197a:	2302      	movs	r3, #2
 800197c:	e01c      	b.n	80019b8 <HAL_PCD_EP_SetStall+0xb8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	4618      	mov	r0, r3
 800198e:	f004 fb50 	bl	8006032 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d108      	bne.n	80019ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f004 fc75 	bl	8006298 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 020f 	and.w	r2, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d901      	bls.n	80019de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e040      	b.n	8001a60 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0e      	bge.n	8001a04 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	705a      	strb	r2, [r3, #1]
 8001a02:	e00e      	b.n	8001a22 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 0207 	and.w	r2, r3, #7
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_PCD_EP_ClrStall+0x82>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e00e      	b.n	8001a60 <HAL_PCD_EP_ClrStall+0xa0>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fb3e 	bl	80060d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a70:	e2ec      	b.n	800204c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001a88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f040 8161 	bne.w	8001d54 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d152      	bne.n	8001b42 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aac:	81fb      	strh	r3, [r7, #14]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3328      	adds	r3, #40	; 0x28
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	441a      	add	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b00:	2100      	movs	r1, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f006 fa3f 	bl	8007f86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 829b 	beq.w	800204c <PCD_EP_ISR_Handler+0x5e4>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8296 	bne.w	800204c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b292      	uxth	r2, r2
 8001b34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b40:	e284      	b.n	800204c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d034      	beq.n	8001bc6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3306      	adds	r3, #6
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f004 fbcc 	bl	8006338 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bac:	4013      	ands	r3, r2
 8001bae:	823b      	strh	r3, [r7, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	8a3a      	ldrh	r2, [r7, #16]
 8001bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f006 f9b4 	bl	8007f2c <HAL_PCD_SetupStageCallback>
 8001bc4:	e242      	b.n	800204c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bc6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f280 823e 	bge.w	800204c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bdc:	4013      	ands	r3, r2
 8001bde:	83bb      	strh	r3, [r7, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	8bba      	ldrh	r2, [r7, #28]
 8001be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bea:	b292      	uxth	r2, r2
 8001bec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	3306      	adds	r3, #6
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <PCD_EP_ISR_Handler+0x1ee>
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	6959      	ldr	r1, [r3, #20]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f004 fb7c 	bl	8006338 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	441a      	add	r2, r3
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f006 f97d 	bl	8007f50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 81f2 	bne.w	800204c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d112      	bne.n	8001cb6 <PCD_EP_ISR_Handler+0x24e>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	801a      	strh	r2, [r3, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	801a      	strh	r2, [r3, #0]
 8001cb4:	e02f      	b.n	8001d16 <PCD_EP_ISR_Handler+0x2ae>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b3e      	cmp	r3, #62	; 0x3e
 8001cbc:	d813      	bhi.n	8001ce6 <PCD_EP_ISR_Handler+0x27e>
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <PCD_EP_ISR_Handler+0x270>
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	029b      	lsls	r3, r3, #10
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	801a      	strh	r2, [r3, #0]
 8001ce4:	e017      	b.n	8001d16 <PCD_EP_ISR_Handler+0x2ae>
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <PCD_EP_ISR_Handler+0x298>
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	827b      	strh	r3, [r7, #18]
 8001d28:	8a7b      	ldrh	r3, [r7, #18]
 8001d2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d2e:	827b      	strh	r3, [r7, #18]
 8001d30:	8a7b      	ldrh	r3, [r7, #18]
 8001d32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d36:	827b      	strh	r3, [r7, #18]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	8a7b      	ldrh	r3, [r7, #18]
 8001d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	8013      	strh	r3, [r2, #0]
 8001d52:	e17b      	b.n	800204c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d66:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f280 80ea 	bge.w	8001f44 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d86:	4013      	ands	r3, r2
 8001d88:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001da2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	7b1b      	ldrb	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d122      	bne.n	8001e06 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3306      	adds	r3, #6
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001dea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8087 	beq.w	8001f00 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	88da      	ldrh	r2, [r3, #6]
 8001dfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e00:	f004 fa9a 	bl	8006338 <USB_ReadPMA>
 8001e04:	e07c      	b.n	8001f00 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	78db      	ldrb	r3, [r3, #3]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d108      	bne.n	8001e20 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e10:	461a      	mov	r2, r3
 8001e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f927 	bl	8002068 <HAL_PCD_EP_DB_Receive>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e1e:	e06f      	b.n	8001f00 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d021      	beq.n	8001ebe <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02a      	beq.n	8001f00 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	6959      	ldr	r1, [r3, #20]
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	891a      	ldrh	r2, [r3, #8]
 8001eb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eb8:	f004 fa3e 	bl	8006338 <USB_ReadPMA>
 8001ebc:	e020      	b.n	8001f00 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	6959      	ldr	r1, [r3, #20]
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	895a      	ldrh	r2, [r3, #10]
 8001efa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001efc:	f004 fa1c 	bl	8006338 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f06:	441a      	add	r2, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f12:	441a      	add	r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <PCD_EP_ISR_Handler+0x4c2>
 8001f20:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d206      	bcs.n	8001f38 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f006 f80d 	bl	8007f50 <HAL_PCD_DataOutStageCallback>
 8001f36:	e005      	b.n	8001f44 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fd80 	bl	8004a44 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d07e      	beq.n	800204c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7c:	843b      	strh	r3, [r7, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	441a      	add	r2, r3
 8001f8c:	8c3b      	ldrh	r3, [r7, #32]
 8001f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	78db      	ldrb	r3, [r3, #3]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d00c      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x554>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d146      	bne.n	8002040 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d141      	bne.n	8002040 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d906      	bls.n	8001ffe <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	619a      	str	r2, [r3, #24]
 8001ffc:	e002      	b.n	8002004 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f005 ffb7 	bl	8007f86 <HAL_PCD_DataInStageCallback>
 8002018:	e018      	b.n	800204c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	8bfb      	ldrh	r3, [r7, #30]
 8002020:	441a      	add	r2, r3
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	8bfb      	ldrh	r3, [r7, #30]
 800202c:	441a      	add	r2, r3
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fd03 	bl	8004a44 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800203e:	e005      	b.n	800204c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002040:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002042:	461a      	mov	r2, r3
 8002044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f91b 	bl	8002282 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002054:	b29b      	uxth	r3, r3
 8002056:	b21b      	sxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f6ff ad0a 	blt.w	8001a72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3738      	adds	r7, #56	; 0x38
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d07e      	beq.n	800217e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	3302      	adds	r3, #2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	8b7b      	ldrh	r3, [r7, #26]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d306      	bcc.n	80020c2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	8b7b      	ldrh	r3, [r7, #26]
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	619a      	str	r2, [r3, #24]
 80020c0:	e002      	b.n	80020c8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d123      	bne.n	8002118 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	833b      	strh	r3, [r7, #24]
 80020ec:	8b3b      	ldrh	r3, [r7, #24]
 80020ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020f2:	833b      	strh	r3, [r7, #24]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	441a      	add	r2, r3
 8002102:	8b3b      	ldrh	r3, [r7, #24]
 8002104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	b29b      	uxth	r3, r3
 8002116:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01f      	beq.n	8002162 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213c:	82fb      	strh	r3, [r7, #22]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	441a      	add	r2, r3
 800214c:	8afb      	ldrh	r3, [r7, #22]
 800214e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800215e:	b29b      	uxth	r3, r3
 8002160:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8087 	beq.w	8002278 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	6959      	ldr	r1, [r3, #20]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	891a      	ldrh	r2, [r3, #8]
 8002176:	8b7b      	ldrh	r3, [r7, #26]
 8002178:	f004 f8de 	bl	8006338 <USB_ReadPMA>
 800217c:	e07c      	b.n	8002278 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	3306      	adds	r3, #6
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	8b7b      	ldrh	r3, [r7, #26]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d306      	bcc.n	80021c0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	1ad2      	subs	r2, r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	619a      	str	r2, [r3, #24]
 80021be:	e002      	b.n	80021c6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d123      	bne.n	8002216 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e8:	83fb      	strh	r3, [r7, #30]
 80021ea:	8bfb      	ldrh	r3, [r7, #30]
 80021ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021f0:	83fb      	strh	r3, [r7, #30]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	8bfb      	ldrh	r3, [r7, #30]
 8002202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800220a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002212:	b29b      	uxth	r3, r3
 8002214:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11f      	bne.n	8002260 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	83bb      	strh	r3, [r7, #28]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	441a      	add	r2, r3
 800224a:	8bbb      	ldrh	r3, [r7, #28]
 800224c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002258:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800225c:	b29b      	uxth	r3, r3
 800225e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002260:	8b7b      	ldrh	r3, [r7, #26]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6959      	ldr	r1, [r3, #20]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	895a      	ldrh	r2, [r3, #10]
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	f004 f860 	bl	8006338 <USB_ReadPMA>
    }
  }

  return count;
 8002278:	8b7b      	ldrh	r3, [r7, #26]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b0a2      	sub	sp, #136	; 0x88
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	4613      	mov	r3, r2
 800228e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 81c7 	beq.w	800262a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	3302      	adds	r3, #2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d907      	bls.n	80022e4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022dc:	1ad2      	subs	r2, r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	619a      	str	r2, [r3, #24]
 80022e2:	e002      	b.n	80022ea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80b9 	bne.w	8002466 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	785b      	ldrb	r3, [r3, #1]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d126      	bne.n	800234a <HAL_PCD_EP_DB_Transmit+0xc8>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	4413      	add	r3, r2
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	011a      	lsls	r2, r3, #4
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	4413      	add	r3, r2
 800231e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800232e:	b29a      	uxth	r2, r3
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	801a      	strh	r2, [r3, #0]
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800233e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002342:	b29a      	uxth	r2, r3
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	e01a      	b.n	8002380 <HAL_PCD_EP_DB_Transmit+0xfe>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d116      	bne.n	8002380 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	4413      	add	r3, r2
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	011a      	lsls	r2, r3, #4
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	4413      	add	r3, r2
 8002374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	2200      	movs	r2, #0
 800237e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d126      	bne.n	80023dc <HAL_PCD_EP_DB_Transmit+0x15a>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	011a      	lsls	r2, r3, #4
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	801a      	strh	r2, [r3, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	e017      	b.n	800240c <HAL_PCD_EP_DB_Transmit+0x18a>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d113      	bne.n	800240c <HAL_PCD_EP_DB_Transmit+0x18a>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	4413      	add	r3, r2
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	011a      	lsls	r2, r3, #4
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	4413      	add	r3, r2
 8002400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f005 fdb7 	bl	8007f86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 82d4 	beq.w	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	827b      	strh	r3, [r7, #18]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	8a7b      	ldrh	r3, [r7, #18]
 8002450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800245c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]
 8002464:	e2b2      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80024a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 8286 	bne.w	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c8:	441a      	add	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d6:	441a      	add	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d309      	bcc.n	80024fc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f4:	1ad2      	subs	r2, r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	621a      	str	r2, [r3, #32]
 80024fa:	e015      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002508:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002512:	e009      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d155      	bne.n	80025dc <HAL_PCD_EP_DB_Transmit+0x35a>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	4413      	add	r3, r2
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	011a      	lsls	r2, r3, #4
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	4413      	add	r3, r2
 8002552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
 8002558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255a:	2b00      	cmp	r3, #0
 800255c:	d112      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0x302>
 800255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002568:	b29a      	uxth	r2, r3
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257c:	b29a      	uxth	r2, r3
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e047      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x392>
 8002584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002586:	2b3e      	cmp	r3, #62	; 0x3e
 8002588:	d811      	bhi.n	80025ae <HAL_PCD_EP_DB_Transmit+0x32c>
 800258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x31e>
 800259a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259c:	3301      	adds	r3, #1
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
 80025a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e032      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x392>
 80025ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x342>
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	3b01      	subs	r3, #1
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	e01b      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x392>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d117      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x392>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	643b      	str	r3, [r7, #64]	; 0x40
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f8:	4413      	add	r3, r2
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	011a      	lsls	r2, r3, #4
 8002602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002604:	4413      	add	r3, r2
 8002606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260e:	b29a      	uxth	r2, r3
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6959      	ldr	r1, [r3, #20]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	891a      	ldrh	r2, [r3, #8]
 8002620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	f003 fe43 	bl	80062ae <USB_WritePMA>
 8002628:	e1d0      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	3306      	adds	r3, #6
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002652:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800265e:	429a      	cmp	r2, r3
 8002660:	d307      	bcc.n	8002672 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800266a:	1ad2      	subs	r2, r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	619a      	str	r2, [r3, #24]
 8002670:	e002      	b.n	8002678 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 80c4 	bne.w	800280a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d126      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x456>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269e:	4413      	add	r3, r2
 80026a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	011a      	lsls	r2, r3, #4
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	e01a      	b.n	800270e <HAL_PCD_EP_DB_Transmit+0x48c>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d116      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0x48c>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	677b      	str	r3, [r7, #116]	; 0x74
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f4:	4413      	add	r3, r2
 80026f6:	677b      	str	r3, [r7, #116]	; 0x74
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	011a      	lsls	r2, r3, #4
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	4413      	add	r3, r2
 8002702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002706:	673b      	str	r3, [r7, #112]	; 0x70
 8002708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	67bb      	str	r3, [r7, #120]	; 0x78
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d12f      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002734:	4413      	add	r3, r2
 8002736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	011a      	lsls	r2, r3, #4
 8002740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002744:	4413      	add	r3, r2
 8002746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800274a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800274e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800275a:	b29a      	uxth	r2, r3
 800275c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002772:	b29a      	uxth	r2, r3
 8002774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e017      	b.n	80027ac <HAL_PCD_EP_DB_Transmit+0x52a>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d113      	bne.n	80027ac <HAL_PCD_EP_DB_Transmit+0x52a>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002792:	4413      	add	r3, r2
 8002794:	67bb      	str	r3, [r7, #120]	; 0x78
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	011a      	lsls	r2, r3, #4
 800279c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279e:	4413      	add	r3, r2
 80027a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a8:	2200      	movs	r2, #0
 80027aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f005 fbe7 	bl	8007f86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 8104 	bne.w	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80027f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	b29b      	uxth	r3, r3
 8002806:	8013      	strh	r3, [r2, #0]
 8002808:	e0e0      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d121      	bne.n	8002858 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	441a      	add	r2, r3
 8002840:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	b29b      	uxth	r3, r3
 8002856:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285e:	2b01      	cmp	r3, #1
 8002860:	f040 80b4 	bne.w	80029cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	441a      	add	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800287a:	441a      	add	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d309      	bcc.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	621a      	str	r2, [r3, #32]
 800289e:	e015      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80028a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028b6:	e009      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	667b      	str	r3, [r7, #100]	; 0x64
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d155      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x704>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ee:	4413      	add	r3, r2
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	011a      	lsls	r2, r3, #4
 80028f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fa:	4413      	add	r3, r2
 80028fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002900:	65bb      	str	r3, [r7, #88]	; 0x58
 8002902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002904:	2b00      	cmp	r3, #0
 8002906:	d112      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002912:	b29a      	uxth	r2, r3
 8002914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002926:	b29a      	uxth	r2, r3
 8002928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e044      	b.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x736>
 800292e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002930:	2b3e      	cmp	r3, #62	; 0x3e
 8002932:	d811      	bhi.n	8002958 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	657b      	str	r3, [r7, #84]	; 0x54
 800293a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002946:	3301      	adds	r3, #1
 8002948:	657b      	str	r3, [r7, #84]	; 0x54
 800294a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294c:	b29b      	uxth	r3, r3
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	b29a      	uxth	r2, r3
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e02f      	b.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x736>
 8002958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	657b      	str	r3, [r7, #84]	; 0x54
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	3b01      	subs	r3, #1
 800296c:	657b      	str	r3, [r7, #84]	; 0x54
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	b29b      	uxth	r3, r3
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	b29b      	uxth	r3, r3
 8002976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297e:	b29a      	uxth	r2, r3
 8002980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e018      	b.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x736>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d114      	bne.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x736>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299c:	4413      	add	r3, r2
 800299e:	667b      	str	r3, [r7, #100]	; 0x64
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	011a      	lsls	r2, r3, #4
 80029a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a8:	4413      	add	r3, r2
 80029aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ae:	663b      	str	r3, [r7, #96]	; 0x60
 80029b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	6959      	ldr	r1, [r3, #20]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	895a      	ldrh	r2, [r3, #10]
 80029c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f003 fc71 	bl	80062ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e6:	823b      	strh	r3, [r7, #16]
 80029e8:	8a3b      	ldrh	r3, [r7, #16]
 80029ea:	f083 0310 	eor.w	r3, r3, #16
 80029ee:	823b      	strh	r3, [r7, #16]
 80029f0:	8a3b      	ldrh	r3, [r7, #16]
 80029f2:	f083 0320 	eor.w	r3, r3, #32
 80029f6:	823b      	strh	r3, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	441a      	add	r2, r3
 8002a06:	8a3b      	ldrh	r3, [r7, #16]
 8002a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3788      	adds	r7, #136	; 0x88
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	817b      	strh	r3, [r7, #10]
 8002a34:	4613      	mov	r3, r2
 8002a36:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a44:	897b      	ldrh	r3, [r7, #10]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e009      	b.n	8002a70 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a5c:	897a      	ldrh	r2, [r7, #10]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	80da      	strh	r2, [r3, #6]
 8002a84:	e00b      	b.n	8002a9e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e26c      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8087 	beq.w	8002bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d00c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
 8002ae4:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	4b89      	ldr	r3, [pc, #548]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d168      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e246      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x76>
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7f      	ldr	r2, [pc, #508]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e02e      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a77      	ldr	r2, [pc, #476]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0xbc>
 8002b4e:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a71      	ldr	r2, [pc, #452]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b68:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fd fff2 	bl	8000b70 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fd ffee 	bl	8000b70 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1fa      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe4>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fd ffde 	bl	8000b70 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fd ffda 	bl	8000b70 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1e6      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x10c>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d063      	beq.n	8002cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be6:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
 8002bfe:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e1ba      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4939      	ldr	r1, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	e03a      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fd ff93 	bl	8000b70 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fd ff8f 	bl	8000b70 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e19b      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4927      	ldr	r1, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd ff72 	bl	8000b70 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fd ff6e 	bl	8000b70 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e17a      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fd ff52 	bl	8000b70 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fd ff4e 	bl	8000b70 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e15a      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f000 faa6 	bl	8003240 <RCC_Delay>
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fd ff38 	bl	8000b70 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d02:	e00f      	b.n	8002d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fd ff34 	bl	8000b70 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d908      	bls.n	8002d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e140      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	42420000 	.word	0x42420000
 8002d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b9e      	ldr	r3, [pc, #632]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e9      	bne.n	8002d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a6 	beq.w	8002e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b97      	ldr	r3, [pc, #604]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b94      	ldr	r3, [pc, #592]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a93      	ldr	r2, [pc, #588]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b91      	ldr	r3, [pc, #580]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a8a      	ldr	r2, [pc, #552]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fd fef5 	bl	8000b70 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fd fef1 	bl	8000b70 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0fd      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x312>
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e02d      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x334>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x356>
 8002de8:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a6c      	ldr	r2, [pc, #432]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a66      	ldr	r2, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a63      	ldr	r2, [pc, #396]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fd fea5 	bl	8000b70 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fd fea1 	bl	8000b70 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0ab      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x37e>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fe8f 	bl	8000b70 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fd fe8b 	bl	8000b70 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e095      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a47      	ldr	r2, [pc, #284]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8081 	beq.w	8002f96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e94:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d061      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d146      	bne.n	8002f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_OscConfig+0x4fc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fe5f 	bl	8000b70 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fd fe5b 	bl	8000b70 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e067      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	492d      	ldr	r1, [pc, #180]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a19      	ldr	r1, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	430b      	orrs	r3, r1
 8002f02:	4927      	ldr	r1, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x4fc>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd fe2f 	bl	8000b70 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd fe2b 	bl	8000b70 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e037      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46a>
 8002f34:	e02f      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_RCC_OscConfig+0x4fc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fd fe18 	bl	8000b70 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fd fe14 	bl	8000b70 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e020      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x498>
 8002f62:	e018      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e013      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42420060 	.word	0x42420060

08002fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0d0      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d910      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b67      	ldr	r3, [pc, #412]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	4965      	ldr	r1, [pc, #404]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b8      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a58      	ldr	r2, [pc, #352]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003012:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800302a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	494d      	ldr	r1, [pc, #308]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d040      	beq.n	80030cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d115      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e07f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e073      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06b      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4936      	ldr	r1, [pc, #216]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800309c:	f7fd fd68 	bl	8000b70 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fd fd64 	bl	8000b70 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e053      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 020c 	and.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1eb      	bne.n	80030a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d210      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4922      	ldr	r1, [pc, #136]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e032      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4916      	ldr	r1, [pc, #88]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	490e      	ldr	r1, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313a:	f000 f821 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 800313e:	4602      	mov	r2, r0
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	490a      	ldr	r1, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	5ccb      	ldrb	r3, [r1, r3]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1cc>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1d0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fcc6 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40022000 	.word	0x40022000
 8003170:	40021000 	.word	0x40021000
 8003174:	08008d98 	.word	0x08008d98
 8003178:	20000000 	.word	0x20000000
 800317c:	20000004 	.word	0x20000004

08003180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	b490      	push	{r4, r7}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003188:	1d3c      	adds	r4, r7, #4
 800318a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800318c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003190:	f240 2301 	movw	r3, #513	; 0x201
 8003194:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x40>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x46>
 80031be:	e02d      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c2:	623b      	str	r3, [r7, #32]
      break;
 80031c4:	e02d      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	0c9b      	lsrs	r3, r3, #18
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031d2:	4413      	add	r3, r2
 80031d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c5b      	lsrs	r3, r3, #17
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031f2:	4413      	add	r3, r2
 80031f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031fe:	fb02 f203 	mul.w	r2, r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	e004      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	623b      	str	r3, [r7, #32]
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
 800321e:	623b      	str	r3, [r7, #32]
      break;
 8003220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003222:	6a3b      	ldr	r3, [r7, #32]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bc90      	pop	{r4, r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	08008d38 	.word	0x08008d38
 8003234:	40021000 	.word	0x40021000
 8003238:	007a1200 	.word	0x007a1200
 800323c:	003d0900 	.word	0x003d0900

08003240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <RCC_Delay+0x34>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <RCC_Delay+0x38>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800325c:	bf00      	nop
  }
  while (Delay --);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <RCC_Delay+0x1c>
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000000 	.word	0x20000000
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d07d      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329c:	4b4f      	ldr	r3, [pc, #316]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a4b      	ldr	r2, [pc, #300]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
 80032b4:	4b49      	ldr	r3, [pc, #292]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c0:	2301      	movs	r3, #1
 80032c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d118      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d0:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a42      	ldr	r2, [pc, #264]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032dc:	f7fd fc48 	bl	8000b70 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	e008      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fd fc44 	bl	8000b70 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e06d      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02e      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d027      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003320:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fd fc13 	bl	8000b70 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd fc0f 	bl	8000b70 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e036      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ee      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4917      	ldr	r1, [pc, #92]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	4313      	orrs	r3, r2
 8003380:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003392:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	490b      	ldr	r1, [pc, #44]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	42420440 	.word	0x42420440

080033e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e076      	b.n	80034e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340a:	d009      	beq.n	8003420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
 8003412:	e005      	b.n	8003420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fa62 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	ea42 0103 	orr.w	r1, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	0c1a      	lsrs	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f002 0204 	and.w	r2, r2, #4
 80034c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_SPI_Transmit+0x22>
 800350e:	2302      	movs	r3, #2
 8003510:	e126      	b.n	8003760 <HAL_SPI_Transmit+0x270>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800351a:	f7fd fb29 	bl	8000b70 <HAL_GetTick>
 800351e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d002      	beq.n	8003536 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003534:	e10b      	b.n	800374e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_SPI_Transmit+0x52>
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003546:	e102      	b.n	800374e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2203      	movs	r2, #3
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358e:	d10f      	bne.n	80035b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d007      	beq.n	80035ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d14b      	bne.n	8003670 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_SPI_Transmit+0xf6>
 80035e0:	8afb      	ldrh	r3, [r7, #22]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d13e      	bne.n	8003664 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	1c9a      	adds	r2, r3, #2
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800360a:	e02b      	b.n	8003664 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d112      	bne.n	8003640 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	1c9a      	adds	r2, r3, #2
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	86da      	strh	r2, [r3, #54]	; 0x36
 800363e:	e011      	b.n	8003664 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003640:	f7fd fa96 	bl	8000b70 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d803      	bhi.n	8003658 <HAL_SPI_Transmit+0x168>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d102      	bne.n	800365e <HAL_SPI_Transmit+0x16e>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003662:	e074      	b.n	800374e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ce      	bne.n	800360c <HAL_SPI_Transmit+0x11c>
 800366e:	e04c      	b.n	800370a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_SPI_Transmit+0x18e>
 8003678:	8afb      	ldrh	r3, [r7, #22]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d140      	bne.n	8003700 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036a4:	e02c      	b.n	8003700 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d113      	bne.n	80036dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80036da:	e011      	b.n	8003700 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036dc:	f7fd fa48 	bl	8000b70 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d803      	bhi.n	80036f4 <HAL_SPI_Transmit+0x204>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f2:	d102      	bne.n	80036fa <HAL_SPI_Transmit+0x20a>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036fe:	e026      	b.n	800374e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1cd      	bne.n	80036a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fbb8 	bl	8003e84 <SPI_EndRxTxTransaction>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e000      	b.n	800374e <HAL_SPI_Transmit+0x25e>
  }

error:
 800374c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800375e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003784:	d112      	bne.n	80037ac <HAL_SPI_Receive+0x44>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2204      	movs	r2, #4
 8003792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f8f1 	bl	800398a <HAL_SPI_TransmitReceive>
 80037a8:	4603      	mov	r3, r0
 80037aa:	e0ea      	b.n	8003982 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_Receive+0x52>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0e3      	b.n	8003982 <HAL_SPI_Receive+0x21a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c2:	f7fd f9d5 	bl	8000b70 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d002      	beq.n	80037da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037d8:	e0ca      	b.n	8003970 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_Receive+0x7e>
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ea:	e0c1      	b.n	8003970 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2204      	movs	r2, #4
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003832:	d10f      	bne.n	8003854 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003842:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d007      	beq.n	8003872 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d162      	bne.n	8003940 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800387a:	e02e      	b.n	80038da <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d115      	bne.n	80038b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f103 020c 	add.w	r2, r3, #12
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b4:	e011      	b.n	80038da <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b6:	f7fd f95b 	bl	8000b70 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Receive+0x166>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Receive+0x16c>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038d8:	e04a      	b.n	8003970 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1cb      	bne.n	800387c <HAL_SPI_Receive+0x114>
 80038e4:	e031      	b.n	800394a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d113      	bne.n	800391c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	b292      	uxth	r2, r2
 8003900:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800391a:	e011      	b.n	8003940 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391c:	f7fd f928 	bl	8000b70 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d803      	bhi.n	8003934 <HAL_SPI_Receive+0x1cc>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d102      	bne.n	800393a <HAL_SPI_Receive+0x1d2>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800393e:	e017      	b.n	8003970 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1cd      	bne.n	80038e6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa46 	bl	8003de0 <SPI_EndRxTransaction>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
 800396c:	e000      	b.n	8003970 <HAL_SPI_Receive+0x208>
  }

error :
 800396e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08c      	sub	sp, #48	; 0x30
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003998:	2301      	movs	r3, #1
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x26>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e18a      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x33c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b8:	f7fd f8da 	bl	8000b70 <HAL_GetTick>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d00f      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x70>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e0:	d107      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x68>
 80039ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d003      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f8:	e15b      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x82>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x82>
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a12:	e14e      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d003      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2205      	movs	r2, #5
 8003a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	887a      	ldrh	r2, [r7, #2]
 8003a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d007      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a84:	d178      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x10a>
 8003a8e:	8b7b      	ldrh	r3, [r7, #26]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d166      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	881a      	ldrh	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab8:	e053      	b.n	8003b62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d11b      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x176>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x176>
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d113      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d119      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x1b8>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d014      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	b292      	uxth	r2, r2
 8003b24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	1c9a      	adds	r2, r3, #2
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b42:	f7fd f815 	bl	8000b70 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d807      	bhi.n	8003b62 <HAL_SPI_TransmitReceive+0x1d8>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b58:	d003      	beq.n	8003b62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b60:	e0a7      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1a6      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x130>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1a1      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x130>
 8003b76:	e07c      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x1fc>
 8003b80:	8b7b      	ldrh	r3, [r7, #26]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d16b      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bac:	e057      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d11c      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x26c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d017      	beq.n	8003bf6 <HAL_SPI_TransmitReceive+0x26c>
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d114      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d119      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x2ae>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d014      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c38:	f7fc ff9a 	bl	8000b70 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d803      	bhi.n	8003c50 <HAL_SPI_TransmitReceive+0x2c6>
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c4e:	d102      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x2cc>
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c5c:	e029      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1a2      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x224>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d19d      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f904 	bl	8003e84 <SPI_EndRxTxTransaction>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c8e:	e010      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	e000      	b.n	8003cb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3730      	adds	r7, #48	; 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ce0:	f7fc ff46 	bl	8000b70 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4413      	add	r3, r2
 8003cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cf0:	f7fc ff3e 	bl	8000b70 <HAL_GetTick>
 8003cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	015b      	lsls	r3, r3, #5
 8003cfc:	0d1b      	lsrs	r3, r3, #20
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d06:	e054      	b.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0e:	d050      	beq.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d10:	f7fc ff2e 	bl	8000b70 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d902      	bls.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d13d      	bne.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3e:	d111      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d48:	d004      	beq.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d107      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6c:	d10f      	bne.n	8003d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e017      	b.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d19b      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000000 	.word	0x20000000

08003de0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df4:	d111      	bne.n	8003e1a <SPI_EndRxTransaction+0x3a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfe:	d004      	beq.n	8003e0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d107      	bne.n	8003e1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e18:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d117      	bne.n	8003e54 <SPI_EndRxTransaction+0x74>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d112      	bne.n	8003e54 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2101      	movs	r1, #1
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff49 	bl	8003cd0 <SPI_WaitFlagStateUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01a      	beq.n	8003e7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e013      	b.n	8003e7c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff ff36 	bl	8003cd0 <SPI_WaitFlagStateUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f043 0220 	orr.w	r2, r3, #32
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e000      	b.n	8003e7c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff ff18 	bl	8003cd0 <SPI_WaitFlagStateUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e000      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	f107 0014 	add.w	r0, r7, #20
 8003ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	b004      	add	sp, #16
 8003ede:	4770      	bx	lr

08003ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ef4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f58:	b084      	sub	sp, #16
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	f107 0014 	add.w	r0, r7, #20
 8003f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	b004      	add	sp, #16
 8003f96:	4770      	bx	lr

08003f98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b09b      	sub	sp, #108	; 0x6c
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	78db      	ldrb	r3, [r3, #3]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d81f      	bhi.n	800400a <USB_ActivateEndpoint+0x72>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <USB_ActivateEndpoint+0x38>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004013 	.word	0x08004013
 8003fdc:	08003fef 	.word	0x08003fef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003fe0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fec:	e012      	b.n	8004014 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ff2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003ff6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ffa:	e00b      	b.n	8004014 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ffc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004004:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004008:	e004      	b.n	8004014 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004010:	e000      	b.n	8004014 <USB_ActivateEndpoint+0x7c>
      break;
 8004012:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004032:	b29b      	uxth	r3, r3
 8004034:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	b29a      	uxth	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4313      	orrs	r3, r2
 8004056:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	7b1b      	ldrb	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 8149 	bne.w	8004318 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8084 	beq.w	8004198 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4413      	add	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	011a      	lsls	r2, r3, #4
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	88db      	ldrh	r3, [r3, #6]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	81fb      	strh	r3, [r7, #14]
 80040d2:	89fb      	ldrh	r3, [r7, #14]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <USB_ActivateEndpoint+0x17c>
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	81bb      	strh	r3, [r7, #12]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	89bb      	ldrh	r3, [r7, #12]
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	78db      	ldrb	r3, [r3, #3]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d020      	beq.n	800415e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	813b      	strh	r3, [r7, #8]
 8004134:	893b      	ldrh	r3, [r7, #8]
 8004136:	f083 0320 	eor.w	r3, r3, #32
 800413a:	813b      	strh	r3, [r7, #8]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	893b      	ldrh	r3, [r7, #8]
 8004148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	b29b      	uxth	r3, r3
 800415a:	8013      	strh	r3, [r2, #0]
 800415c:	e27f      	b.n	800465e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]
 8004196:	e262      	b.n	800465e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	4413      	add	r3, r2
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	011a      	lsls	r2, r3, #4
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	88db      	ldrh	r3, [r3, #6]
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	4413      	add	r3, r2
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	011a      	lsls	r2, r3, #4
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	4413      	add	r3, r2
 80041ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d112      	bne.n	800421e <USB_ActivateEndpoint+0x286>
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004202:	b29a      	uxth	r2, r3
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004216:	b29a      	uxth	r2, r3
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	e02f      	b.n	800427e <USB_ActivateEndpoint+0x2e6>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b3e      	cmp	r3, #62	; 0x3e
 8004224:	d813      	bhi.n	800424e <USB_ActivateEndpoint+0x2b6>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	663b      	str	r3, [r7, #96]	; 0x60
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <USB_ActivateEndpoint+0x2a8>
 800423a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800423c:	3301      	adds	r3, #1
 800423e:	663b      	str	r3, [r7, #96]	; 0x60
 8004240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004242:	b29b      	uxth	r3, r3
 8004244:	029b      	lsls	r3, r3, #10
 8004246:	b29a      	uxth	r2, r3
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e017      	b.n	800427e <USB_ActivateEndpoint+0x2e6>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	663b      	str	r3, [r7, #96]	; 0x60
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <USB_ActivateEndpoint+0x2d0>
 8004262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004264:	3b01      	subs	r3, #1
 8004266:	663b      	str	r3, [r7, #96]	; 0x60
 8004268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800426a:	b29b      	uxth	r3, r3
 800426c:	029b      	lsls	r3, r3, #10
 800426e:	b29b      	uxth	r3, r3
 8004270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004278:	b29a      	uxth	r2, r3
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	83fb      	strh	r3, [r7, #30]
 800428c:	8bfb      	ldrh	r3, [r7, #30]
 800428e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01b      	beq.n	80042ce <USB_ActivateEndpoint+0x336>
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ac:	83bb      	strh	r3, [r7, #28]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	441a      	add	r2, r3
 80042b8:	8bbb      	ldrh	r3, [r7, #28]
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	837b      	strh	r3, [r7, #26]
 80042e6:	8b7b      	ldrh	r3, [r7, #26]
 80042e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042ec:	837b      	strh	r3, [r7, #26]
 80042ee:	8b7b      	ldrh	r3, [r7, #26]
 80042f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042f4:	837b      	strh	r3, [r7, #26]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	441a      	add	r2, r3
 8004300:	8b7b      	ldrh	r3, [r7, #26]
 8004302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	b29b      	uxth	r3, r3
 8004314:	8013      	strh	r3, [r2, #0]
 8004316:	e1a2      	b.n	800465e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	65bb      	str	r3, [r7, #88]	; 0x58
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004364:	4413      	add	r3, r2
 8004366:	65bb      	str	r3, [r7, #88]	; 0x58
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	011a      	lsls	r2, r3, #4
 800436e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004370:	4413      	add	r3, r2
 8004372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	891b      	ldrh	r3, [r3, #8]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	653b      	str	r3, [r7, #80]	; 0x50
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004398:	4413      	add	r3, r2
 800439a:	653b      	str	r3, [r7, #80]	; 0x50
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	011a      	lsls	r2, r3, #4
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	895b      	ldrh	r3, [r3, #10]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 8091 	bne.w	80044e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80043d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80043d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01b      	beq.n	8004416 <USB_ActivateEndpoint+0x47e>
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	873b      	strh	r3, [r7, #56]	; 0x38
 8004424:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <USB_ActivateEndpoint+0x4ce>
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004444:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800447e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004480:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004484:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004486:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004488:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800448c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	441a      	add	r2, r3
 8004498:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800449a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
 80044e6:	e0ba      	b.n	800465e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01d      	beq.n	8004540 <USB_ActivateEndpoint+0x5a8>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004550:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01d      	beq.n	8004598 <USB_ActivateEndpoint+0x600>
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004590:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004594:	b29b      	uxth	r3, r3
 8004596:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	78db      	ldrb	r3, [r3, #3]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d024      	beq.n	80045ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045be:	f083 0320 	eor.w	r3, r3, #32
 80045c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
 80045e8:	e01d      	b.n	8004626 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004600:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800465e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004662:	4618      	mov	r0, r3
 8004664:	376c      	adds	r7, #108	; 0x6c
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800466c:	b480      	push	{r7}
 800466e:	b08d      	sub	sp, #52	; 0x34
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	7b1b      	ldrb	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 808e 	bne.w	800479c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d044      	beq.n	8004712 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	81bb      	strh	r3, [r7, #12]
 8004696:	89bb      	ldrh	r3, [r7, #12]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <USB_DeactivateEndpoint+0x6c>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	817b      	strh	r3, [r7, #10]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	897b      	ldrh	r3, [r7, #10]
 80046c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ee:	813b      	strh	r3, [r7, #8]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	893b      	ldrh	r3, [r7, #8]
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]
 8004710:	e192      	b.n	8004a38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	827b      	strh	r3, [r7, #18]
 8004720:	8a7b      	ldrh	r3, [r7, #18]
 8004722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01b      	beq.n	8004762 <USB_DeactivateEndpoint+0xf6>
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004740:	823b      	strh	r3, [r7, #16]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	8a3b      	ldrh	r3, [r7, #16]
 800474e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800475a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475e:	b29b      	uxth	r3, r3
 8004760:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004778:	81fb      	strh	r3, [r7, #14]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	441a      	add	r2, r3
 8004784:	89fb      	ldrh	r3, [r7, #14]
 8004786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004796:	b29b      	uxth	r3, r3
 8004798:	8013      	strh	r3, [r2, #0]
 800479a:	e14d      	b.n	8004a38 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 80a5 	bne.w	80048f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	843b      	strh	r3, [r7, #32]
 80047b4:	8c3b      	ldrh	r3, [r7, #32]
 80047b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01b      	beq.n	80047f6 <USB_DeactivateEndpoint+0x18a>
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	83fb      	strh	r3, [r7, #30]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	441a      	add	r2, r3
 80047e0:	8bfb      	ldrh	r3, [r7, #30]
 80047e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	83bb      	strh	r3, [r7, #28]
 8004804:	8bbb      	ldrh	r3, [r7, #28]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01b      	beq.n	8004846 <USB_DeactivateEndpoint+0x1da>
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004824:	837b      	strh	r3, [r7, #26]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	8b7b      	ldrh	r3, [r7, #26]
 8004832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	833b      	strh	r3, [r7, #24]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	8b3b      	ldrh	r3, [r7, #24]
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004876:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004894:	82fb      	strh	r3, [r7, #22]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	441a      	add	r2, r3
 80048a0:	8afb      	ldrh	r3, [r7, #22]
 80048a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048cc:	82bb      	strh	r3, [r7, #20]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8abb      	ldrh	r3, [r7, #20]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]
 80048ee:	e0a3      	b.n	8004a38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <USB_DeactivateEndpoint+0x2d4>
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800494e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <USB_DeactivateEndpoint+0x324>
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3734      	adds	r7, #52	; 0x34
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0cc      	sub	sp, #304	; 0x130
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	6018      	str	r0, [r3, #0]
 8004a4e:	463b      	mov	r3, r7
 8004a50:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a52:	463b      	mov	r3, r7
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f040 872e 	bne.w	80058ba <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a5e:	463b      	mov	r3, r7
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d905      	bls.n	8004a7a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004a6e:	463b      	mov	r3, r7
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a78:	e004      	b.n	8004a84 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	7b1b      	ldrb	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d134      	bne.n	8004af8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6959      	ldr	r1, [r3, #20]
 8004a94:	463b      	mov	r3, r7
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	88da      	ldrh	r2, [r3, #6]
 8004a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	1d38      	adds	r0, r7, #4
 8004aa2:	6800      	ldr	r0, [r0, #0]
 8004aa4:	f001 fc03 	bl	80062ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004aa8:	f107 0310 	add.w	r3, r7, #16
 8004aac:	1d3a      	adds	r2, r7, #4
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4619      	mov	r1, r3
 8004abe:	f107 0310 	add.w	r3, r7, #16
 8004ac2:	f107 0210 	add.w	r2, r7, #16
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	440a      	add	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	463b      	mov	r3, r7
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	011a      	lsls	r2, r3, #4
 8004ad4:	f107 0310 	add.w	r3, r7, #16
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4413      	add	r3, r2
 8004adc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	f000 beac 	b.w	8005850 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004af8:	463b      	mov	r3, r7
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	78db      	ldrb	r3, [r3, #3]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	f040 838c 	bne.w	800521c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b04:	463b      	mov	r3, r7
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	f240 8330 	bls.w	8005176 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b16:	1d3b      	adds	r3, r7, #4
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b64:	1ad2      	subs	r2, r2, r3
 8004b66:	463b      	mov	r3, r7
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b6c:	1d3b      	adds	r3, r7, #4
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	463b      	mov	r3, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 819e 	beq.w	8004ec4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b8c:	1d3a      	adds	r2, r7, #4
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	463b      	mov	r3, r7
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d17a      	bne.n	8004c92 <USB_EPStartXfer+0x24e>
 8004b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba0:	1d3a      	adds	r2, r7, #4
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	011a      	lsls	r2, r3, #4
 8004bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11a      	bne.n	8004c18 <USB_EPStartXfer+0x1d4>
 8004be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	801a      	strh	r2, [r3, #0]
 8004bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	e062      	b.n	8004cde <USB_EPStartXfer+0x29a>
 8004c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c1e:	d819      	bhi.n	8004c54 <USB_EPStartXfer+0x210>
 8004c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <USB_EPStartXfer+0x1fc>
 8004c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	e044      	b.n	8004cde <USB_EPStartXfer+0x29a>
 8004c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <USB_EPStartXfer+0x230>
 8004c6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	e025      	b.n	8004cde <USB_EPStartXfer+0x29a>
 8004c92:	463b      	mov	r3, r7
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d120      	bne.n	8004cde <USB_EPStartXfer+0x29a>
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cde:	463b      	mov	r3, r7
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	895b      	ldrh	r3, [r3, #10]
 8004ce4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6959      	ldr	r1, [r3, #20]
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cf8:	1d38      	adds	r0, r7, #4
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	f001 fad7 	bl	80062ae <USB_WritePMA>
            ep->xfer_buff += len;
 8004d00:	463b      	mov	r3, r7
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0a:	441a      	add	r2, r3
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d12:	463b      	mov	r3, r7
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	463b      	mov	r3, r7
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d909      	bls.n	8004d36 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004d22:	463b      	mov	r3, r7
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2c:	1ad2      	subs	r2, r2, r3
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	621a      	str	r2, [r3, #32]
 8004d34:	e008      	b.n	8004d48 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d36:	463b      	mov	r3, r7
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004d40:	463b      	mov	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d17a      	bne.n	8004e48 <USB_EPStartXfer+0x404>
 8004d52:	f107 0318 	add.w	r3, r7, #24
 8004d56:	1d3a      	adds	r2, r7, #4
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4619      	mov	r1, r3
 8004d68:	f107 0318 	add.w	r3, r7, #24
 8004d6c:	f107 0218 	add.w	r2, r7, #24
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	440a      	add	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	463b      	mov	r3, r7
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	011a      	lsls	r2, r3, #4
 8004d7e:	f107 0318 	add.w	r3, r7, #24
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4413      	add	r3, r2
 8004d86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d8a:	f107 0314 	add.w	r3, r7, #20
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11a      	bne.n	8004dce <USB_EPStartXfer+0x38a>
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	e067      	b.n	8004e9e <USB_EPStartXfer+0x45a>
 8004dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd4:	d819      	bhi.n	8004e0a <USB_EPStartXfer+0x3c6>
 8004dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <USB_EPStartXfer+0x3b2>
 8004dec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004df0:	3301      	adds	r3, #1
 8004df2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004df6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	029b      	lsls	r3, r3, #10
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e049      	b.n	8004e9e <USB_EPStartXfer+0x45a>
 8004e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <USB_EPStartXfer+0x3e6>
 8004e20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e24:	3b01      	subs	r3, #1
 8004e26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	029b      	lsls	r3, r3, #10
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	f107 0314 	add.w	r3, r7, #20
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e02a      	b.n	8004e9e <USB_EPStartXfer+0x45a>
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d125      	bne.n	8004e9e <USB_EPStartXfer+0x45a>
 8004e52:	f107 0320 	add.w	r3, r7, #32
 8004e56:	1d3a      	adds	r2, r7, #4
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	f107 0320 	add.w	r3, r7, #32
 8004e6c:	f107 0220 	add.w	r2, r7, #32
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	440a      	add	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	011a      	lsls	r2, r3, #4
 8004e7e:	f107 0320 	add.w	r3, r7, #32
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e8a:	f107 031c 	add.w	r3, r7, #28
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	f107 031c 	add.w	r3, r7, #28
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	891b      	ldrh	r3, [r3, #8]
 8004ea4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6959      	ldr	r1, [r3, #20]
 8004eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004eb8:	1d38      	adds	r0, r7, #4
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	f001 f9f7 	bl	80062ae <USB_WritePMA>
 8004ec0:	f000 bcc6 	b.w	8005850 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d164      	bne.n	8004f98 <USB_EPStartXfer+0x554>
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	4413      	add	r3, r2
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d112      	bne.n	8004f26 <USB_EPStartXfer+0x4e2>
 8004f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e057      	b.n	8004fd6 <USB_EPStartXfer+0x592>
 8004f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f2c:	d817      	bhi.n	8004f5e <USB_EPStartXfer+0x51a>
 8004f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <USB_EPStartXfer+0x50a>
 8004f44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e03b      	b.n	8004fd6 <USB_EPStartXfer+0x592>
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <USB_EPStartXfer+0x53a>
 8004f74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e01e      	b.n	8004fd6 <USB_EPStartXfer+0x592>
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d119      	bne.n	8004fd6 <USB_EPStartXfer+0x592>
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb6:	4413      	add	r3, r2
 8004fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8004fba:	463b      	mov	r3, r7
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	891b      	ldrh	r3, [r3, #8]
 8004fdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6959      	ldr	r1, [r3, #20]
 8004fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ff0:	1d38      	adds	r0, r7, #4
 8004ff2:	6800      	ldr	r0, [r0, #0]
 8004ff4:	f001 f95b 	bl	80062ae <USB_WritePMA>
            ep->xfer_buff += len;
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695a      	ldr	r2, [r3, #20]
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	441a      	add	r2, r3
 8005004:	463b      	mov	r3, r7
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800500a:	463b      	mov	r3, r7
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d909      	bls.n	800502e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800501a:	463b      	mov	r3, r7
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	621a      	str	r2, [r3, #32]
 800502c:	e008      	b.n	8005040 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800502e:	463b      	mov	r3, r7
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	643b      	str	r3, [r7, #64]	; 0x40
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d164      	bne.n	800511a <USB_EPStartXfer+0x6d6>
 8005050:	1d3b      	adds	r3, r7, #4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
 8005056:	1d3b      	adds	r3, r7, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	4413      	add	r3, r2
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	011a      	lsls	r2, r3, #4
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	4413      	add	r3, r2
 8005074:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005078:	637b      	str	r3, [r7, #52]	; 0x34
 800507a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d112      	bne.n	80050a8 <USB_EPStartXfer+0x664>
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800508c:	b29a      	uxth	r2, r3
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e054      	b.n	8005152 <USB_EPStartXfer+0x70e>
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	2b3e      	cmp	r3, #62	; 0x3e
 80050ae:	d817      	bhi.n	80050e0 <USB_EPStartXfer+0x69c>
 80050b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <USB_EPStartXfer+0x68c>
 80050c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ca:	3301      	adds	r3, #1
 80050cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	029b      	lsls	r3, r3, #10
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e038      	b.n	8005152 <USB_EPStartXfer+0x70e>
 80050e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <USB_EPStartXfer+0x6bc>
 80050f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005104:	b29b      	uxth	r3, r3
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	b29b      	uxth	r3, r3
 800510a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800510e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005112:	b29a      	uxth	r2, r3
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	e01b      	b.n	8005152 <USB_EPStartXfer+0x70e>
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d116      	bne.n	8005152 <USB_EPStartXfer+0x70e>
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512c:	b29b      	uxth	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	4413      	add	r3, r2
 8005134:	643b      	str	r3, [r7, #64]	; 0x40
 8005136:	463b      	mov	r3, r7
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	011a      	lsls	r2, r3, #4
 800513e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005140:	4413      	add	r3, r2
 8005142:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514c:	b29a      	uxth	r2, r3
 800514e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005150:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	895b      	ldrh	r3, [r3, #10]
 8005158:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6959      	ldr	r1, [r3, #20]
 8005162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005166:	b29b      	uxth	r3, r3
 8005168:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800516c:	1d38      	adds	r0, r7, #4
 800516e:	6800      	ldr	r0, [r0, #0]
 8005170:	f001 f89d 	bl	80062ae <USB_WritePMA>
 8005174:	e36c      	b.n	8005850 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d8:	4413      	add	r3, r2
 80051da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051dc:	463b      	mov	r3, r7
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	011a      	lsls	r2, r3, #4
 80051e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e6:	4413      	add	r3, r2
 80051e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	891b      	ldrh	r3, [r3, #8]
 80051fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005202:	463b      	mov	r3, r7
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6959      	ldr	r1, [r3, #20]
 8005208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520c:	b29b      	uxth	r3, r3
 800520e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005212:	1d38      	adds	r0, r7, #4
 8005214:	6800      	ldr	r0, [r0, #0]
 8005216:	f001 f84a 	bl	80062ae <USB_WritePMA>
 800521a:	e319      	b.n	8005850 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	463b      	mov	r3, r7
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800524c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005254:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6a1a      	ldr	r2, [r3, #32]
 8005266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	463b      	mov	r3, r7
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8162 	beq.w	8005552 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005296:	463b      	mov	r3, r7
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d164      	bne.n	800536a <USB_EPStartXfer+0x926>
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a6:	1d3b      	adds	r3, r7, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b4:	4413      	add	r3, r2
 80052b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80052b8:	463b      	mov	r3, r7
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	011a      	lsls	r2, r3, #4
 80052c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c2:	4413      	add	r3, r2
 80052c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c8:	677b      	str	r3, [r7, #116]	; 0x74
 80052ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d112      	bne.n	80052f8 <USB_EPStartXfer+0x8b4>
 80052d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	e057      	b.n	80053a8 <USB_EPStartXfer+0x964>
 80052f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fc:	2b3e      	cmp	r3, #62	; 0x3e
 80052fe:	d817      	bhi.n	8005330 <USB_EPStartXfer+0x8ec>
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800530a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <USB_EPStartXfer+0x8dc>
 8005316:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800531a:	3301      	adds	r3, #1
 800531c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005320:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29a      	uxth	r2, r3
 800532a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	e03b      	b.n	80053a8 <USB_EPStartXfer+0x964>
 8005330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <USB_EPStartXfer+0x90c>
 8005346:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800534a:	3b01      	subs	r3, #1
 800534c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005350:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005354:	b29b      	uxth	r3, r3
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005362:	b29a      	uxth	r2, r3
 8005364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e01e      	b.n	80053a8 <USB_EPStartXfer+0x964>
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d119      	bne.n	80053a8 <USB_EPStartXfer+0x964>
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537c:	b29b      	uxth	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005384:	4413      	add	r3, r2
 8005386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800538a:	463b      	mov	r3, r7
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	011a      	lsls	r2, r3, #4
 8005392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005396:	4413      	add	r3, r2
 8005398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800539c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800539e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80053a8:	463b      	mov	r3, r7
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	895b      	ldrh	r3, [r3, #10]
 80053ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b2:	463b      	mov	r3, r7
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6959      	ldr	r1, [r3, #20]
 80053b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053c2:	1d38      	adds	r0, r7, #4
 80053c4:	6800      	ldr	r0, [r0, #0]
 80053c6:	f000 ff72 	bl	80062ae <USB_WritePMA>
          ep->xfer_buff += len;
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d4:	441a      	add	r2, r3
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	463b      	mov	r3, r7
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d909      	bls.n	8005400 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80053ec:	463b      	mov	r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	621a      	str	r2, [r3, #32]
 80053fe:	e008      	b.n	8005412 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005400:	463b      	mov	r3, r7
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800540a:	463b      	mov	r3, r7
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 821a 	beq.w	8005850 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d164      	bne.n	80054f0 <USB_EPStartXfer+0xaac>
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	66bb      	str	r3, [r7, #104]	; 0x68
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005434:	b29b      	uxth	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800543a:	4413      	add	r3, r2
 800543c:	66bb      	str	r3, [r7, #104]	; 0x68
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005448:	4413      	add	r3, r2
 800544a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800544e:	667b      	str	r3, [r7, #100]	; 0x64
 8005450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <USB_EPStartXfer+0xa3a>
 8005458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005462:	b29a      	uxth	r2, r3
 8005464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e057      	b.n	800552e <USB_EPStartXfer+0xaea>
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005482:	2b3e      	cmp	r3, #62	; 0x3e
 8005484:	d817      	bhi.n	80054b6 <USB_EPStartXfer+0xa72>
 8005486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <USB_EPStartXfer+0xa62>
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e03b      	b.n	800552e <USB_EPStartXfer+0xaea>
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <USB_EPStartXfer+0xa92>
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e01e      	b.n	800552e <USB_EPStartXfer+0xaea>
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d119      	bne.n	800552e <USB_EPStartXfer+0xaea>
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800550e:	4413      	add	r3, r2
 8005510:	673b      	str	r3, [r7, #112]	; 0x70
 8005512:	463b      	mov	r3, r7
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	011a      	lsls	r2, r3, #4
 800551a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551c:	4413      	add	r3, r2
 800551e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005528:	b29a      	uxth	r2, r3
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800552e:	463b      	mov	r3, r7
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	891b      	ldrh	r3, [r3, #8]
 8005534:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6959      	ldr	r1, [r3, #20]
 800553e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005542:	b29b      	uxth	r3, r3
 8005544:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005548:	1d38      	adds	r0, r7, #4
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	f000 feaf 	bl	80062ae <USB_WritePMA>
 8005550:	e17e      	b.n	8005850 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d16f      	bne.n	800563c <USB_EPStartXfer+0xbf8>
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005574:	4413      	add	r3, r2
 8005576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	011a      	lsls	r2, r3, #4
 8005582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005586:	4413      	add	r3, r2
 8005588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800558c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d116      	bne.n	80055c6 <USB_EPStartXfer+0xb82>
 8005598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e05f      	b.n	8005686 <USB_EPStartXfer+0xc42>
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	2b3e      	cmp	r3, #62	; 0x3e
 80055cc:	d818      	bhi.n	8005600 <USB_EPStartXfer+0xbbc>
 80055ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <USB_EPStartXfer+0xbaa>
 80055e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e042      	b.n	8005686 <USB_EPStartXfer+0xc42>
 8005600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800560a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <USB_EPStartXfer+0xbdc>
 8005616:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800561a:	3b01      	subs	r3, #1
 800561c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005620:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005624:	b29b      	uxth	r3, r3
 8005626:	029b      	lsls	r3, r3, #10
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e024      	b.n	8005686 <USB_EPStartXfer+0xc42>
 800563c:	463b      	mov	r3, r7
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d11f      	bne.n	8005686 <USB_EPStartXfer+0xc42>
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800565e:	4413      	add	r3, r2
 8005660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	011a      	lsls	r2, r3, #4
 800566c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005670:	4413      	add	r3, r2
 8005672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800567a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567e:	b29a      	uxth	r2, r3
 8005680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005684:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	891b      	ldrh	r3, [r3, #8]
 800568c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6959      	ldr	r1, [r3, #20]
 8005696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569a:	b29b      	uxth	r3, r3
 800569c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056a0:	1d38      	adds	r0, r7, #4
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	f000 fe03 	bl	80062ae <USB_WritePMA>
          ep->xfer_buff += len;
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b2:	441a      	add	r2, r3
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d909      	bls.n	80056de <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	621a      	str	r2, [r3, #32]
 80056dc:	e008      	b.n	80056f0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80056f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80ab 	beq.w	8005850 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005702:	463b      	mov	r3, r7
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d16f      	bne.n	80057ec <USB_EPStartXfer+0xda8>
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005724:	4413      	add	r3, r2
 8005726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	011a      	lsls	r2, r3, #4
 8005732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005736:	4413      	add	r3, r2
 8005738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800573c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d116      	bne.n	8005776 <USB_EPStartXfer+0xd32>
 8005748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e05b      	b.n	800582e <USB_EPStartXfer+0xdea>
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	2b3e      	cmp	r3, #62	; 0x3e
 800577c:	d818      	bhi.n	80057b0 <USB_EPStartXfer+0xd6c>
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <USB_EPStartXfer+0xd5a>
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005798:	3301      	adds	r3, #1
 800579a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800579e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	029b      	lsls	r3, r3, #10
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e03e      	b.n	800582e <USB_EPStartXfer+0xdea>
 80057b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <USB_EPStartXfer+0xd8c>
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	3b01      	subs	r3, #1
 80057cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29b      	uxth	r3, r3
 80057da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	e020      	b.n	800582e <USB_EPStartXfer+0xdea>
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d11b      	bne.n	800582e <USB_EPStartXfer+0xdea>
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fe:	b29b      	uxth	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005806:	4413      	add	r3, r2
 8005808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	011a      	lsls	r2, r3, #4
 8005814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005818:	4413      	add	r3, r2
 800581a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800581e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005826:	b29a      	uxth	r2, r3
 8005828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800582c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	895b      	ldrh	r3, [r3, #10]
 8005834:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005838:	463b      	mov	r3, r7
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6959      	ldr	r1, [r3, #20]
 800583e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005842:	b29b      	uxth	r3, r3
 8005844:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005848:	1d38      	adds	r0, r7, #4
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	f000 fd2f 	bl	80062ae <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	463b      	mov	r3, r7
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f107 020a 	add.w	r2, r7, #10
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586e:	8013      	strh	r3, [r2, #0]
 8005870:	f107 030a 	add.w	r3, r7, #10
 8005874:	f107 020a 	add.w	r2, r7, #10
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	f082 0210 	eor.w	r2, r2, #16
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	f107 030a 	add.w	r3, r7, #10
 8005884:	f107 020a 	add.w	r2, r7, #10
 8005888:	8812      	ldrh	r2, [r2, #0]
 800588a:	f082 0220 	eor.w	r2, r2, #32
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	441a      	add	r2, r3
 800589e:	f107 030a 	add.w	r3, r7, #10
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8013      	strh	r3, [r2, #0]
 80058b8:	e3b5      	b.n	8006026 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	7b1b      	ldrb	r3, [r3, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8090 	bne.w	80059e6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	463b      	mov	r3, r7
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d90e      	bls.n	80058f4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e008      	b.n	8005906 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005906:	1d3b      	adds	r3, r7, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800591e:	4413      	add	r3, r2
 8005920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005924:	463b      	mov	r3, r7
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	011a      	lsls	r2, r3, #4
 800592c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005930:	4413      	add	r3, r2
 8005932:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d116      	bne.n	8005970 <USB_EPStartXfer+0xf2c>
 8005942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800594e:	b29a      	uxth	r2, r3
 8005950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005966:	b29a      	uxth	r2, r3
 8005968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	e32c      	b.n	8005fca <USB_EPStartXfer+0x1586>
 8005970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005974:	2b3e      	cmp	r3, #62	; 0x3e
 8005976:	d818      	bhi.n	80059aa <USB_EPStartXfer+0xf66>
 8005978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <USB_EPStartXfer+0xf54>
 800598e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005992:	3301      	adds	r3, #1
 8005994:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800599c:	b29b      	uxth	r3, r3
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e30f      	b.n	8005fca <USB_EPStartXfer+0x1586>
 80059aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <USB_EPStartXfer+0xf86>
 80059c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059c4:	3b01      	subs	r3, #1
 80059c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059dc:	b29a      	uxth	r2, r3
 80059de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e2f1      	b.n	8005fca <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f040 818f 	bne.w	8005d10 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d175      	bne.n	8005ae8 <USB_EPStartXfer+0x10a4>
 80059fc:	1d3b      	adds	r3, r7, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a14:	4413      	add	r3, r2
 8005a16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	011a      	lsls	r2, r3, #4
 8005a22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <USB_EPStartXfer+0x1024>
 8005a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	e065      	b.n	8005b34 <USB_EPStartXfer+0x10f0>
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a70:	d81a      	bhi.n	8005aa8 <USB_EPStartXfer+0x1064>
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a7e:	463b      	mov	r3, r7
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <USB_EPStartXfer+0x1052>
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a90:	3301      	adds	r3, #1
 8005a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e045      	b.n	8005b34 <USB_EPStartXfer+0x10f0>
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <USB_EPStartXfer+0x1088>
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e025      	b.n	8005b34 <USB_EPStartXfer+0x10f0>
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d120      	bne.n	8005b34 <USB_EPStartXfer+0x10f0>
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d175      	bne.n	8005c32 <USB_EPStartXfer+0x11ee>
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b5e:	4413      	add	r3, r2
 8005b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	011a      	lsls	r2, r3, #4
 8005b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <USB_EPStartXfer+0x116e>
 8005b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e061      	b.n	8005c76 <USB_EPStartXfer+0x1232>
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bba:	d81a      	bhi.n	8005bf2 <USB_EPStartXfer+0x11ae>
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bc8:	463b      	mov	r3, r7
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <USB_EPStartXfer+0x119c>
 8005bd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bda:	3301      	adds	r3, #1
 8005bdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005be0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e041      	b.n	8005c76 <USB_EPStartXfer+0x1232>
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <USB_EPStartXfer+0x11d2>
 8005c0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	e021      	b.n	8005c76 <USB_EPStartXfer+0x1232>
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d11c      	bne.n	8005c76 <USB_EPStartXfer+0x1232>
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c52:	463b      	mov	r3, r7
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	011a      	lsls	r2, r3, #4
 8005c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c5e:	4413      	add	r3, r2
 8005c60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 81a4 	beq.w	8005fca <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <USB_EPStartXfer+0x126a>
 8005ca2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10d      	bne.n	8005cca <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 8187 	bne.w	8005fca <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 8180 	bne.w	8005fca <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	463b      	mov	r3, r7
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	8013      	strh	r3, [r2, #0]
 8005d0e:	e15c      	b.n	8005fca <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	f040 8155 	bne.w	8005fc6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d90e      	bls.n	8005d4a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005d36:	463b      	mov	r3, r7
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	619a      	str	r2, [r3, #24]
 8005d48:	e008      	b.n	8005d5c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d16f      	bne.n	8005e46 <USB_EPStartXfer+0x1402>
 8005d66:	1d3b      	adds	r3, r7, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d7e:	4413      	add	r3, r2
 8005d80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	011a      	lsls	r2, r3, #4
 8005d8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d90:	4413      	add	r3, r2
 8005d92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d116      	bne.n	8005dd0 <USB_EPStartXfer+0x138c>
 8005da2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e05f      	b.n	8005e90 <USB_EPStartXfer+0x144c>
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005dd6:	d818      	bhi.n	8005e0a <USB_EPStartXfer+0x13c6>
 8005dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <USB_EPStartXfer+0x13b4>
 8005dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df2:	3301      	adds	r3, #1
 8005df4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e042      	b.n	8005e90 <USB_EPStartXfer+0x144c>
 8005e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <USB_EPStartXfer+0x13e6>
 8005e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e24:	3b01      	subs	r3, #1
 8005e26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e024      	b.n	8005e90 <USB_EPStartXfer+0x144c>
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d11f      	bne.n	8005e90 <USB_EPStartXfer+0x144c>
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e58:	1d3b      	adds	r3, r7, #4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	4413      	add	r3, r2
 8005e6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	011a      	lsls	r2, r3, #4
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	1d3b      	adds	r3, r7, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e98:	463b      	mov	r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d16f      	bne.n	8005f82 <USB_EPStartXfer+0x153e>
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eba:	4413      	add	r3, r2
 8005ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	011a      	lsls	r2, r3, #4
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d116      	bne.n	8005f0c <USB_EPStartXfer+0x14c8>
 8005ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e05e      	b.n	8005fca <USB_EPStartXfer+0x1586>
 8005f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f10:	2b3e      	cmp	r3, #62	; 0x3e
 8005f12:	d818      	bhi.n	8005f46 <USB_EPStartXfer+0x1502>
 8005f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <USB_EPStartXfer+0x14f0>
 8005f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f2e:	3301      	adds	r3, #1
 8005f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e041      	b.n	8005fca <USB_EPStartXfer+0x1586>
 8005f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USB_EPStartXfer+0x1522>
 8005f5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f60:	3b01      	subs	r3, #1
 8005f62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	e023      	b.n	8005fca <USB_EPStartXfer+0x1586>
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d11e      	bne.n	8005fca <USB_EPStartXfer+0x1586>
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	011a      	lsls	r2, r3, #4
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e001      	b.n	8005fca <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e02e      	b.n	8006028 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	463b      	mov	r3, r7
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fe8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ff0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ff4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ffc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605a:	81bb      	strh	r3, [r7, #12]
 800605c:	89bb      	ldrh	r3, [r7, #12]
 800605e:	f083 0310 	eor.w	r3, r3, #16
 8006062:	81bb      	strh	r3, [r7, #12]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	89bb      	ldrh	r3, [r7, #12]
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]
 8006084:	e01f      	b.n	80060c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609c:	81fb      	strh	r3, [r7, #14]
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060a4:	81fb      	strh	r3, [r7, #14]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr

080060d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	7b1b      	ldrb	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 809d 	bne.w	8006220 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04c      	beq.n	8006188 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	823b      	strh	r3, [r7, #16]
 80060fc:	8a3b      	ldrh	r3, [r7, #16]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01b      	beq.n	800613e <USB_EPClearStall+0x6c>
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611c:	81fb      	strh	r3, [r7, #14]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	441a      	add	r2, r3
 8006128:	89fb      	ldrh	r3, [r7, #14]
 800612a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d06c      	beq.n	8006220 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	81bb      	strh	r3, [r7, #12]
 800615e:	89bb      	ldrh	r3, [r7, #12]
 8006160:	f083 0320 	eor.w	r3, r3, #32
 8006164:	81bb      	strh	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	441a      	add	r2, r3
 8006170:	89bb      	ldrh	r3, [r7, #12]
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]
 8006186:	e04b      	b.n	8006220 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	82fb      	strh	r3, [r7, #22]
 8006196:	8afb      	ldrh	r3, [r7, #22]
 8006198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01b      	beq.n	80061d8 <USB_EPClearStall+0x106>
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	82bb      	strh	r3, [r7, #20]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	8abb      	ldrh	r3, [r7, #20]
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	827b      	strh	r3, [r7, #18]
 80061f0:	8a7b      	ldrh	r3, [r7, #18]
 80061f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061f6:	827b      	strh	r3, [r7, #18]
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061fe:	827b      	strh	r3, [r7, #18]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	8a7b      	ldrh	r3, [r7, #18]
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2280      	movs	r2, #128	; 0x80
 8006242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr

0800627a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006288:	b29b      	uxth	r3, r3
 800628a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800628c:	68fb      	ldr	r3, [r7, #12]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b08d      	sub	sp, #52	; 0x34
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	4611      	mov	r1, r2
 80062ba:	461a      	mov	r2, r3
 80062bc:	460b      	mov	r3, r1
 80062be:	80fb      	strh	r3, [r7, #6]
 80062c0:	4613      	mov	r3, r2
 80062c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	3301      	adds	r3, #1
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	005a      	lsls	r2, r3, #1
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e6:	e01e      	b.n	8006326 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	3301      	adds	r3, #1
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	b29a      	uxth	r2, r3
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	3302      	adds	r3, #2
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	3302      	adds	r3, #2
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	3301      	adds	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	3b01      	subs	r3, #1
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1dd      	bne.n	80062e8 <USB_WritePMA+0x3a>
  }
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3734      	adds	r7, #52	; 0x34
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006338:	b480      	push	{r7}
 800633a:	b08b      	sub	sp, #44	; 0x2c
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4611      	mov	r1, r2
 8006344:	461a      	mov	r2, r3
 8006346:	460b      	mov	r3, r1
 8006348:	80fb      	strh	r3, [r7, #6]
 800634a:	4613      	mov	r3, r2
 800634c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800634e:	88bb      	ldrh	r3, [r7, #4]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	b29b      	uxth	r3, r3
 8006354:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	005a      	lsls	r2, r3, #1
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
 8006370:	e01b      	b.n	80063aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	3302      	adds	r3, #2
 800637e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	b2da      	uxtb	r2, r3
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	3301      	adds	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	b2da      	uxtb	r2, r3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3301      	adds	r3, #1
 800639c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	3302      	adds	r3, #2
 80063a2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	3b01      	subs	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e0      	bne.n	8006372 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80063b0:	88bb      	ldrh	r3, [r7, #4]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	701a      	strb	r2, [r3, #0]
  }
}
 80063cc:	bf00      	nop
 80063ce:	372c      	adds	r7, #44	; 0x2c
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7c1b      	ldrb	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d115      	bne.n	800641a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f2:	2202      	movs	r2, #2
 80063f4:	2181      	movs	r1, #129	; 0x81
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fea9 	bl	800814e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006406:	2202      	movs	r2, #2
 8006408:	2101      	movs	r1, #1
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fe9f 	bl	800814e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006418:	e012      	b.n	8006440 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	2202      	movs	r2, #2
 800641e:	2181      	movs	r1, #129	; 0x81
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fe94 	bl	800814e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	2202      	movs	r2, #2
 8006430:	2101      	movs	r1, #1
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fe8b 	bl	800814e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006440:	2308      	movs	r3, #8
 8006442:	2203      	movs	r2, #3
 8006444:	2182      	movs	r1, #130	; 0x82
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fe81 	bl	800814e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006452:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006456:	f001 ffa1 	bl	800839c <USBD_static_malloc>
 800645a:	4602      	mov	r2, r0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
 8006470:	e026      	b.n	80064c0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7c1b      	ldrb	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064a6:	2101      	movs	r1, #1
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 ff41 	bl	8008330 <USBD_LL_PrepareReceive>
 80064ae:	e007      	b.n	80064c0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	2101      	movs	r1, #1
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 ff38 	bl	8008330 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064da:	2181      	movs	r1, #129	; 0x81
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fe5c 	bl	800819a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064e8:	2101      	movs	r1, #1
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 fe55 	bl	800819a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064f8:	2182      	movs	r1, #130	; 0x82
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fe4d 	bl	800819a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00e      	beq.n	800652e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	4618      	mov	r0, r3
 8006522:	f001 ff47 	bl	80083b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006548:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800655e:	2b00      	cmp	r3, #0
 8006560:	d039      	beq.n	80065d6 <USBD_CDC_Setup+0x9e>
 8006562:	2b20      	cmp	r3, #32
 8006564:	d17f      	bne.n	8006666 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	88db      	ldrh	r3, [r3, #6]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d029      	beq.n	80065c2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b25b      	sxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	da11      	bge.n	800659c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006584:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	88d2      	ldrh	r2, [r2, #6]
 800658a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800658c:	6939      	ldr	r1, [r7, #16]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	461a      	mov	r2, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 fa0a 	bl	80079ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800659a:	e06b      	b.n	8006674 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785a      	ldrb	r2, [r3, #1]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065b2:	6939      	ldr	r1, [r7, #16]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fa25 	bl	8007a0a <USBD_CtlPrepareRx>
      break;
 80065c0:	e058      	b.n	8006674 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	7850      	ldrb	r0, [r2, #1]
 80065ce:	2200      	movs	r2, #0
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	4798      	blx	r3
      break;
 80065d4:	e04e      	b.n	8006674 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b0b      	cmp	r3, #11
 80065dc:	d02e      	beq.n	800663c <USBD_CDC_Setup+0x104>
 80065de:	2b0b      	cmp	r3, #11
 80065e0:	dc38      	bgt.n	8006654 <USBD_CDC_Setup+0x11c>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <USBD_CDC_Setup+0xb4>
 80065e6:	2b0a      	cmp	r3, #10
 80065e8:	d014      	beq.n	8006614 <USBD_CDC_Setup+0xdc>
 80065ea:	e033      	b.n	8006654 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d107      	bne.n	8006606 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80065f6:	f107 030c 	add.w	r3, r7, #12
 80065fa:	2202      	movs	r2, #2
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f9d5 	bl	80079ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006604:	e02e      	b.n	8006664 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 f966 	bl	80078da <USBD_CtlError>
            ret = USBD_FAIL;
 800660e:	2302      	movs	r3, #2
 8006610:	75fb      	strb	r3, [r7, #23]
          break;
 8006612:	e027      	b.n	8006664 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	2b03      	cmp	r3, #3
 800661c:	d107      	bne.n	800662e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800661e:	f107 030f 	add.w	r3, r7, #15
 8006622:	2201      	movs	r2, #1
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 f9c1 	bl	80079ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800662c:	e01a      	b.n	8006664 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f952 	bl	80078da <USBD_CtlError>
            ret = USBD_FAIL;
 8006636:	2302      	movs	r3, #2
 8006638:	75fb      	strb	r3, [r7, #23]
          break;
 800663a:	e013      	b.n	8006664 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006642:	2b03      	cmp	r3, #3
 8006644:	d00d      	beq.n	8006662 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f946 	bl	80078da <USBD_CtlError>
            ret = USBD_FAIL;
 800664e:	2302      	movs	r3, #2
 8006650:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006652:	e006      	b.n	8006662 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 f93f 	bl	80078da <USBD_CtlError>
          ret = USBD_FAIL;
 800665c:	2302      	movs	r3, #2
 800665e:	75fb      	strb	r3, [r7, #23]
          break;
 8006660:	e000      	b.n	8006664 <USBD_CDC_Setup+0x12c>
          break;
 8006662:	bf00      	nop
      }
      break;
 8006664:	e006      	b.n	8006674 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f936 	bl	80078da <USBD_CtlError>
      ret = USBD_FAIL;
 800666e:	2302      	movs	r3, #2
 8006670:	75fb      	strb	r3, [r7, #23]
      break;
 8006672:	bf00      	nop
  }

  return ret;
 8006674:	7dfb      	ldrb	r3, [r7, #23]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006698:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d03a      	beq.n	800671a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	331c      	adds	r3, #28
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d029      	beq.n	800670e <USBD_CDC_DataIn+0x90>
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	331c      	adds	r3, #28
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	78f9      	ldrb	r1, [r7, #3]
 80066ce:	68b8      	ldr	r0, [r7, #8]
 80066d0:	460b      	mov	r3, r1
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4403      	add	r3, r0
 80066da:	3338      	adds	r3, #56	; 0x38
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	fbb2 f1f3 	udiv	r1, r2, r3
 80066e2:	fb03 f301 	mul.w	r3, r3, r1
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d110      	bne.n	800670e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	331c      	adds	r3, #28
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006700:	78f9      	ldrb	r1, [r7, #3]
 8006702:	2300      	movs	r3, #0
 8006704:	2200      	movs	r2, #0
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fdef 	bl	80082ea <USBD_LL_Transmit>
 800670c:	e003      	b.n	8006716 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fe1a 	bl	8008376 <USBD_LL_GetRxDataSize>
 8006742:	4602      	mov	r2, r0
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00d      	beq.n	8006770 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006768:	4611      	mov	r1, r2
 800676a:	4798      	blx	r3

    return USBD_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <USBD_CDC_EP0_RxReady+0x46>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800679a:	2bff      	cmp	r3, #255	; 0xff
 800679c:	d010      	beq.n	80067c0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80067ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067b4:	b292      	uxth	r2, r2
 80067b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	22ff      	movs	r2, #255	; 0xff
 80067bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2243      	movs	r2, #67	; 0x43
 80067d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80067da:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	20000094 	.word	0x20000094

080067ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2243      	movs	r2, #67	; 0x43
 80067f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80067fa:	4b03      	ldr	r3, [pc, #12]	; (8006808 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000050 	.word	0x20000050

0800680c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2243      	movs	r2, #67	; 0x43
 8006818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800681a:	4b03      	ldr	r3, [pc, #12]	; (8006828 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	200000d8 	.word	0x200000d8

0800682c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	220a      	movs	r2, #10
 8006838:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800683a:	4b03      	ldr	r3, [pc, #12]	; (8006848 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	2000000c 	.word	0x2000000c

0800684c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006856:	2302      	movs	r3, #2
 8006858:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr

080068aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01c      	beq.n	8006924 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d115      	bne.n	8006920 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006912:	b29b      	uxth	r3, r3
 8006914:	2181      	movs	r1, #129	; 0x81
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fce7 	bl	80082ea <USBD_LL_Transmit>

      return USBD_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e002      	b.n	8006926 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006924:	2302      	movs	r3, #2
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d017      	beq.n	8006978 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7c1b      	ldrb	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695a:	2101      	movs	r1, #1
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fce7 	bl	8008330 <USBD_LL_PrepareReceive>
 8006962:	e007      	b.n	8006974 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	2101      	movs	r1, #1
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fcde 	bl	8008330 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006978:	2302      	movs	r3, #2
  }
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	4613      	mov	r3, r2
 800698e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006996:	2302      	movs	r3, #2
 8006998:	e01a      	b.n	80069d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	79fa      	ldrb	r2, [r7, #7]
 80069c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 fb4b 	bl	8008064 <USBD_LL_Init>

  return USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d006      	beq.n	80069fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e001      	b.n	80069fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069fa:	2302      	movs	r3, #2
 80069fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fb80 	bl	8008118 <USBD_LL_Start>

  return USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a42:	2302      	movs	r3, #2
 8006a44:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3

  return USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fed8 	bl	8007862 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d016      	beq.n	8006b04 <USBD_LL_SetupStage+0x6a>
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d81c      	bhi.n	8006b14 <USBD_LL_SetupStage+0x7a>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <USBD_LL_SetupStage+0x4a>
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d008      	beq.n	8006af4 <USBD_LL_SetupStage+0x5a>
 8006ae2:	e017      	b.n	8006b14 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9cb 	bl	8006e88 <USBD_StdDevReq>
      break;
 8006af2:	e01a      	b.n	8006b2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa2d 	bl	8006f5c <USBD_StdItfReq>
      break;
 8006b02:	e012      	b.n	8006b2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fa6d 	bl	8006fec <USBD_StdEPReq>
      break;
 8006b12:	e00a      	b.n	8006b2a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fb58 	bl	80081d8 <USBD_LL_StallEP>
      break;
 8006b28:	bf00      	nop
  }

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d14b      	bne.n	8006be0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d134      	bne.n	8006bc4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d919      	bls.n	8006b9a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d203      	bcs.n	8006b88 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	e002      	b.n	8006b8e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 ff57 	bl	8007a46 <USBD_CtlContinueRx>
 8006b98:	e038      	b.n	8006c0c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d105      	bne.n	8006bbc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 ff54 	bl	8007a6a <USBD_CtlSendStatus>
 8006bc2:	e023      	b.n	8006c0c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d11e      	bne.n	8006c0c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f001 fafd 	bl	80081d8 <USBD_LL_StallEP>
 8006bde:	e015      	b.n	8006c0c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d108      	bne.n	8006c08 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	7afa      	ldrb	r2, [r7, #11]
 8006c00:	4611      	mov	r1, r2
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	4798      	blx	r3
 8006c06:	e001      	b.n	8006c0c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e000      	b.n	8006c0e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d17f      	bne.n	8006d2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3314      	adds	r3, #20
 8006c2e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d15c      	bne.n	8006cf4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d915      	bls.n	8006c72 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fec1 	bl	80079e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c64:	2300      	movs	r3, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 fb60 	bl	8008330 <USBD_LL_PrepareReceive>
 8006c70:	e04e      	b.n	8006d10 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	6912      	ldr	r2, [r2, #16]
 8006c7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c7e:	fb02 f201 	mul.w	r2, r2, r1
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11c      	bne.n	8006cc2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d316      	bcc.n	8006cc2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d20f      	bcs.n	8006cc2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fe9d 	bl	80079e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f001 fb38 	bl	8008330 <USBD_LL_PrepareReceive>
 8006cc0:	e026      	b.n	8006d10 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d105      	bne.n	8006ce4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f001 fa76 	bl	80081d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fecf 	bl	8007a90 <USBD_CtlReceiveStatus>
 8006cf2:	e00d      	b.n	8006d10 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d004      	beq.n	8006d08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f001 fa64 	bl	80081d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d11d      	bne.n	8006d56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fe81 	bl	8006a22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d28:	e015      	b.n	8006d56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d108      	bne.n	8006d52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	7afa      	ldrb	r2, [r7, #11]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	4798      	blx	r3
 8006d50:	e001      	b.n	8006d56 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d52:	2302      	movs	r3, #2
 8006d54:	e000      	b.n	8006d58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d68:	2340      	movs	r3, #64	; 0x40
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f9ed 	bl	800814e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2240      	movs	r2, #64	; 0x40
 8006d80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	2200      	movs	r2, #0
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f9df 	bl	800814e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2240      	movs	r2, #64	; 0x40
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d009      	beq.n	8006dd8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6852      	ldr	r2, [r2, #4]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
  }

  return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2204      	movs	r2, #4
 8006e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d105      	bne.n	8006e46 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d10b      	bne.n	8006e7c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e9e:	2b40      	cmp	r3, #64	; 0x40
 8006ea0:	d005      	beq.n	8006eae <USBD_StdDevReq+0x26>
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d84f      	bhi.n	8006f46 <USBD_StdDevReq+0xbe>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <USBD_StdDevReq+0x36>
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d14b      	bne.n	8006f46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
      break;
 8006ebc:	e048      	b.n	8006f50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	2b09      	cmp	r3, #9
 8006ec4:	d839      	bhi.n	8006f3a <USBD_StdDevReq+0xb2>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <USBD_StdDevReq+0x44>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f1d 	.word	0x08006f1d
 8006ed0:	08006f31 	.word	0x08006f31
 8006ed4:	08006f3b 	.word	0x08006f3b
 8006ed8:	08006f27 	.word	0x08006f27
 8006edc:	08006f3b 	.word	0x08006f3b
 8006ee0:	08006eff 	.word	0x08006eff
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006f3b 	.word	0x08006f3b
 8006eec:	08006f13 	.word	0x08006f13
 8006ef0:	08006f09 	.word	0x08006f09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9dc 	bl	80072b4 <USBD_GetDescriptor>
          break;
 8006efc:	e022      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fb3f 	bl	8007584 <USBD_SetAddress>
          break;
 8006f06:	e01d      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fb7e 	bl	800760c <USBD_SetConfig>
          break;
 8006f10:	e018      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fc07 	bl	8007728 <USBD_GetConfig>
          break;
 8006f1a:	e013      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fc37 	bl	8007792 <USBD_GetStatus>
          break;
 8006f24:	e00e      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fc65 	bl	80077f8 <USBD_SetFeature>
          break;
 8006f2e:	e009      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fc74 	bl	8007820 <USBD_ClrFeature>
          break;
 8006f38:	e004      	b.n	8006f44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fccc 	bl	80078da <USBD_CtlError>
          break;
 8006f42:	bf00      	nop
      }
      break;
 8006f44:	e004      	b.n	8006f50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fcc6 	bl	80078da <USBD_CtlError>
      break;
 8006f4e:	bf00      	nop
  }

  return ret;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop

08006f5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d005      	beq.n	8006f82 <USBD_StdItfReq+0x26>
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d82e      	bhi.n	8006fd8 <USBD_StdItfReq+0x7c>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <USBD_StdItfReq+0x26>
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d12a      	bne.n	8006fd8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d81d      	bhi.n	8006fca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	889b      	ldrh	r3, [r3, #4]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d813      	bhi.n	8006fc0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d110      	bne.n	8006fd4 <USBD_StdItfReq+0x78>
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10d      	bne.n	8006fd4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fd56 	bl	8007a6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fbe:	e009      	b.n	8006fd4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fc89 	bl	80078da <USBD_CtlError>
          break;
 8006fc8:	e004      	b.n	8006fd4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fc84 	bl	80078da <USBD_CtlError>
          break;
 8006fd2:	e000      	b.n	8006fd6 <USBD_StdItfReq+0x7a>
          break;
 8006fd4:	bf00      	nop
      }
      break;
 8006fd6:	e004      	b.n	8006fe2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fc7d 	bl	80078da <USBD_CtlError>
      break;
 8006fe0:	bf00      	nop
  }

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d007      	beq.n	800701c <USBD_StdEPReq+0x30>
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	f200 8146 	bhi.w	800729e <USBD_StdEPReq+0x2b2>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <USBD_StdEPReq+0x40>
 8007016:	2b20      	cmp	r3, #32
 8007018:	f040 8141 	bne.w	800729e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
      break;
 800702a:	e13d      	b.n	80072a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007034:	2b20      	cmp	r3, #32
 8007036:	d10a      	bne.n	800704e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]

        return ret;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	e12d      	b.n	80072aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d007      	beq.n	8007066 <USBD_StdEPReq+0x7a>
 8007056:	2b03      	cmp	r3, #3
 8007058:	f300 811b 	bgt.w	8007292 <USBD_StdEPReq+0x2a6>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d072      	beq.n	8007146 <USBD_StdEPReq+0x15a>
 8007060:	2b01      	cmp	r3, #1
 8007062:	d03a      	beq.n	80070da <USBD_StdEPReq+0xee>
 8007064:	e115      	b.n	8007292 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706c:	2b02      	cmp	r3, #2
 800706e:	d002      	beq.n	8007076 <USBD_StdEPReq+0x8a>
 8007070:	2b03      	cmp	r3, #3
 8007072:	d015      	beq.n	80070a0 <USBD_StdEPReq+0xb4>
 8007074:	e02b      	b.n	80070ce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00c      	beq.n	8007096 <USBD_StdEPReq+0xaa>
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b80      	cmp	r3, #128	; 0x80
 8007080:	d009      	beq.n	8007096 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 f8a6 	bl	80081d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800708c:	2180      	movs	r1, #128	; 0x80
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 f8a2 	bl	80081d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007094:	e020      	b.n	80070d8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc1e 	bl	80078da <USBD_CtlError>
              break;
 800709e:	e01b      	b.n	80070d8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	885b      	ldrh	r3, [r3, #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10e      	bne.n	80070c6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <USBD_StdEPReq+0xda>
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d008      	beq.n	80070c6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	88db      	ldrh	r3, [r3, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f889 	bl	80081d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fccf 	bl	8007a6a <USBD_CtlSendStatus>

              break;
 80070cc:	e004      	b.n	80070d8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc02 	bl	80078da <USBD_CtlError>
              break;
 80070d6:	bf00      	nop
          }
          break;
 80070d8:	e0e0      	b.n	800729c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d002      	beq.n	80070ea <USBD_StdEPReq+0xfe>
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d015      	beq.n	8007114 <USBD_StdEPReq+0x128>
 80070e8:	e026      	b.n	8007138 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <USBD_StdEPReq+0x11e>
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d009      	beq.n	800710a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 f86c 	bl	80081d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f868 	bl	80081d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007108:	e01c      	b.n	8007144 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fbe4 	bl	80078da <USBD_CtlError>
              break;
 8007112:	e017      	b.n	8007144 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	885b      	ldrh	r3, [r3, #2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d112      	bne.n	8007142 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 f873 	bl	8008216 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc9a 	bl	8007a6a <USBD_CtlSendStatus>
              }
              break;
 8007136:	e004      	b.n	8007142 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fbcd 	bl	80078da <USBD_CtlError>
              break;
 8007140:	e000      	b.n	8007144 <USBD_StdEPReq+0x158>
              break;
 8007142:	bf00      	nop
          }
          break;
 8007144:	e0aa      	b.n	800729c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714c:	2b02      	cmp	r3, #2
 800714e:	d002      	beq.n	8007156 <USBD_StdEPReq+0x16a>
 8007150:	2b03      	cmp	r3, #3
 8007152:	d032      	beq.n	80071ba <USBD_StdEPReq+0x1ce>
 8007154:	e097      	b.n	8007286 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <USBD_StdEPReq+0x180>
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d004      	beq.n	800716c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fbb8 	bl	80078da <USBD_CtlError>
                break;
 800716a:	e091      	b.n	8007290 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800716c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007170:	2b00      	cmp	r3, #0
 8007172:	da0b      	bge.n	800718c <USBD_StdEPReq+0x1a0>
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	3310      	adds	r3, #16
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	3304      	adds	r3, #4
 800718a:	e00b      	b.n	80071a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	3304      	adds	r3, #4
 80071a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2202      	movs	r2, #2
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fbfb 	bl	80079ae <USBD_CtlSendData>
              break;
 80071b8:	e06a      	b.n	8007290 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da11      	bge.n	80071e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	f003 020f 	and.w	r2, r3, #15
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	3318      	adds	r3, #24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d117      	bne.n	800720c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fb7b 	bl	80078da <USBD_CtlError>
                  break;
 80071e4:	e054      	b.n	8007290 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	f003 020f 	and.w	r2, r3, #15
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fb68 	bl	80078da <USBD_CtlError>
                  break;
 800720a:	e041      	b.n	8007290 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800720c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da0b      	bge.n	800722c <USBD_StdEPReq+0x240>
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	3310      	adds	r3, #16
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	3304      	adds	r3, #4
 800722a:	e00b      	b.n	8007244 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	3304      	adds	r3, #4
 8007244:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <USBD_StdEPReq+0x266>
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d103      	bne.n	800725a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e00e      	b.n	8007278 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fff8 	bl	8008254 <USBD_LL_IsStallEP>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2201      	movs	r2, #1
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e002      	b.n	8007278 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2202      	movs	r2, #2
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fb95 	bl	80079ae <USBD_CtlSendData>
              break;
 8007284:	e004      	b.n	8007290 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fb26 	bl	80078da <USBD_CtlError>
              break;
 800728e:	bf00      	nop
          }
          break;
 8007290:	e004      	b.n	800729c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fb20 	bl	80078da <USBD_CtlError>
          break;
 800729a:	bf00      	nop
      }
      break;
 800729c:	e004      	b.n	80072a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb1a 	bl	80078da <USBD_CtlError>
      break;
 80072a6:	bf00      	nop
  }

  return ret;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	2b06      	cmp	r3, #6
 80072d6:	f200 8128 	bhi.w	800752a <USBD_GetDescriptor+0x276>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <USBD_GetDescriptor+0x2c>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072fd 	.word	0x080072fd
 80072e4:	08007315 	.word	0x08007315
 80072e8:	08007355 	.word	0x08007355
 80072ec:	0800752b 	.word	0x0800752b
 80072f0:	0800752b 	.word	0x0800752b
 80072f4:	080074cb 	.word	0x080074cb
 80072f8:	080074f7 	.word	0x080074f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	7c12      	ldrb	r2, [r2, #16]
 8007308:	f107 0108 	add.w	r1, r7, #8
 800730c:	4610      	mov	r0, r2
 800730e:	4798      	blx	r3
 8007310:	60f8      	str	r0, [r7, #12]
      break;
 8007312:	e112      	b.n	800753a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7c1b      	ldrb	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10d      	bne.n	8007338 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	f107 0208 	add.w	r2, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	2202      	movs	r2, #2
 8007334:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007336:	e100      	b.n	800753a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f107 0208 	add.w	r2, r7, #8
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
 8007348:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	2202      	movs	r2, #2
 8007350:	701a      	strb	r2, [r3, #0]
      break;
 8007352:	e0f2      	b.n	800753a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	885b      	ldrh	r3, [r3, #2]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b05      	cmp	r3, #5
 800735c:	f200 80ac 	bhi.w	80074b8 <USBD_GetDescriptor+0x204>
 8007360:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <USBD_GetDescriptor+0xb4>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	08007381 	.word	0x08007381
 800736c:	080073b5 	.word	0x080073b5
 8007370:	080073e9 	.word	0x080073e9
 8007374:	0800741d 	.word	0x0800741d
 8007378:	08007451 	.word	0x08007451
 800737c:	08007485 	.word	0x08007485
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7c12      	ldrb	r2, [r2, #16]
 8007398:	f107 0108 	add.w	r1, r7, #8
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073a2:	e091      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa97 	bl	80078da <USBD_CtlError>
            err++;
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	3301      	adds	r3, #1
 80073b0:	72fb      	strb	r3, [r7, #11]
          break;
 80073b2:	e089      	b.n	80074c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7c12      	ldrb	r2, [r2, #16]
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073d6:	e077      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa7d 	bl	80078da <USBD_CtlError>
            err++;
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	3301      	adds	r3, #1
 80073e4:	72fb      	strb	r3, [r7, #11]
          break;
 80073e6:	e06f      	b.n	80074c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740a:	e05d      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa63 	bl	80078da <USBD_CtlError>
            err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
          break;
 800741a:	e055      	b.n	80074c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800743e:	e043      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa49 	bl	80078da <USBD_CtlError>
            err++;
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	3301      	adds	r3, #1
 800744c:	72fb      	strb	r3, [r7, #11]
          break;
 800744e:	e03b      	b.n	80074c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007472:	e029      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa2f 	bl	80078da <USBD_CtlError>
            err++;
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	3301      	adds	r3, #1
 8007480:	72fb      	strb	r3, [r7, #11]
          break;
 8007482:	e021      	b.n	80074c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	7c12      	ldrb	r2, [r2, #16]
 800749c:	f107 0108 	add.w	r1, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074a6:	e00f      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa15 	bl	80078da <USBD_CtlError>
            err++;
 80074b0:	7afb      	ldrb	r3, [r7, #11]
 80074b2:	3301      	adds	r3, #1
 80074b4:	72fb      	strb	r3, [r7, #11]
          break;
 80074b6:	e007      	b.n	80074c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa0d 	bl	80078da <USBD_CtlError>
          err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074c6:	e038      	b.n	800753a <USBD_GetDescriptor+0x286>
 80074c8:	e037      	b.n	800753a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	7c1b      	ldrb	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074da:	f107 0208 	add.w	r2, r7, #8
 80074de:	4610      	mov	r0, r2
 80074e0:	4798      	blx	r3
 80074e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074e4:	e029      	b.n	800753a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f9f6 	bl	80078da <USBD_CtlError>
        err++;
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	3301      	adds	r3, #1
 80074f2:	72fb      	strb	r3, [r7, #11]
      break;
 80074f4:	e021      	b.n	800753a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7c1b      	ldrb	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10d      	bne.n	800751a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	f107 0208 	add.w	r2, r7, #8
 800750a:	4610      	mov	r0, r2
 800750c:	4798      	blx	r3
 800750e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	2207      	movs	r2, #7
 8007516:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007518:	e00f      	b.n	800753a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9dc 	bl	80078da <USBD_CtlError>
        err++;
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	3301      	adds	r3, #1
 8007526:	72fb      	strb	r3, [r7, #11]
      break;
 8007528:	e007      	b.n	800753a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9d4 	bl	80078da <USBD_CtlError>
      err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	bf00      	nop
  }

  if (err != 0U)
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d11c      	bne.n	800757a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007540:	893b      	ldrh	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d011      	beq.n	800756a <USBD_GetDescriptor+0x2b6>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	88db      	ldrh	r3, [r3, #6]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88da      	ldrh	r2, [r3, #6]
 8007552:	893b      	ldrh	r3, [r7, #8]
 8007554:	4293      	cmp	r3, r2
 8007556:	bf28      	it	cs
 8007558:	4613      	movcs	r3, r2
 800755a:	b29b      	uxth	r3, r3
 800755c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800755e:	893b      	ldrh	r3, [r7, #8]
 8007560:	461a      	mov	r2, r3
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa22 	bl	80079ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	88db      	ldrh	r3, [r3, #6]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d104      	bne.n	800757c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa79 	bl	8007a6a <USBD_CtlSendStatus>
 8007578:	e000      	b.n	800757c <USBD_GetDescriptor+0x2c8>
    return;
 800757a:	bf00      	nop
    }
  }
}
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop

08007584 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	889b      	ldrh	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d130      	bne.n	80075f8 <USBD_SetAddress+0x74>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d12c      	bne.n	80075f8 <USBD_SetAddress+0x74>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	885b      	ldrh	r3, [r3, #2]
 80075a2:	2b7f      	cmp	r3, #127	; 0x7f
 80075a4:	d828      	bhi.n	80075f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	885b      	ldrh	r3, [r3, #2]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d104      	bne.n	80075c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f98b 	bl	80078da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c4:	e01d      	b.n	8007602 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	7bfa      	ldrb	r2, [r7, #15]
 80075ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fe6a 	bl	80082ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa46 	bl	8007a6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ec:	e009      	b.n	8007602 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f6:	e004      	b.n	8007602 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f96d 	bl	80078da <USBD_CtlError>
  }
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	885b      	ldrh	r3, [r3, #2]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	4b41      	ldr	r3, [pc, #260]	; (8007724 <USBD_SetConfig+0x118>)
 800761e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007620:	4b40      	ldr	r3, [pc, #256]	; (8007724 <USBD_SetConfig+0x118>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d904      	bls.n	8007632 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f955 	bl	80078da <USBD_CtlError>
 8007630:	e075      	b.n	800771e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007638:	2b02      	cmp	r3, #2
 800763a:	d002      	beq.n	8007642 <USBD_SetConfig+0x36>
 800763c:	2b03      	cmp	r3, #3
 800763e:	d023      	beq.n	8007688 <USBD_SetConfig+0x7c>
 8007640:	e062      	b.n	8007708 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007642:	4b38      	ldr	r3, [pc, #224]	; (8007724 <USBD_SetConfig+0x118>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01a      	beq.n	8007680 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800764a:	4b36      	ldr	r3, [pc, #216]	; (8007724 <USBD_SetConfig+0x118>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2203      	movs	r2, #3
 8007658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800765c:	4b31      	ldr	r3, [pc, #196]	; (8007724 <USBD_SetConfig+0x118>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff f9e7 	bl	8006a36 <USBD_SetClassConfig>
 8007668:	4603      	mov	r3, r0
 800766a:	2b02      	cmp	r3, #2
 800766c:	d104      	bne.n	8007678 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f932 	bl	80078da <USBD_CtlError>
            return;
 8007676:	e052      	b.n	800771e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9f6 	bl	8007a6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800767e:	e04e      	b.n	800771e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f9f2 	bl	8007a6a <USBD_CtlSendStatus>
        break;
 8007686:	e04a      	b.n	800771e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007688:	4b26      	ldr	r3, [pc, #152]	; (8007724 <USBD_SetConfig+0x118>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d112      	bne.n	80076b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007698:	4b22      	ldr	r3, [pc, #136]	; (8007724 <USBD_SetConfig+0x118>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076a2:	4b20      	ldr	r3, [pc, #128]	; (8007724 <USBD_SetConfig+0x118>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff f9e3 	bl	8006a74 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9db 	bl	8007a6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076b4:	e033      	b.n	800771e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <USBD_SetConfig+0x118>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d01d      	beq.n	8007700 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff f9d1 	bl	8006a74 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076d2:	4b14      	ldr	r3, [pc, #80]	; (8007724 <USBD_SetConfig+0x118>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <USBD_SetConfig+0x118>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff f9a7 	bl	8006a36 <USBD_SetClassConfig>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d104      	bne.n	80076f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8f2 	bl	80078da <USBD_CtlError>
            return;
 80076f6:	e012      	b.n	800771e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f9b6 	bl	8007a6a <USBD_CtlSendStatus>
        break;
 80076fe:	e00e      	b.n	800771e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f9b2 	bl	8007a6a <USBD_CtlSendStatus>
        break;
 8007706:	e00a      	b.n	800771e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f8e5 	bl	80078da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007710:	4b04      	ldr	r3, [pc, #16]	; (8007724 <USBD_SetConfig+0x118>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff f9ac 	bl	8006a74 <USBD_ClrClassConfig>
        break;
 800771c:	bf00      	nop
    }
  }
}
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000304 	.word	0x20000304

08007728 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	88db      	ldrh	r3, [r3, #6]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d004      	beq.n	8007744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f8cc 	bl	80078da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007742:	e022      	b.n	800778a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774a:	2b02      	cmp	r3, #2
 800774c:	dc02      	bgt.n	8007754 <USBD_GetConfig+0x2c>
 800774e:	2b00      	cmp	r3, #0
 8007750:	dc03      	bgt.n	800775a <USBD_GetConfig+0x32>
 8007752:	e015      	b.n	8007780 <USBD_GetConfig+0x58>
 8007754:	2b03      	cmp	r3, #3
 8007756:	d00b      	beq.n	8007770 <USBD_GetConfig+0x48>
 8007758:	e012      	b.n	8007780 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3308      	adds	r3, #8
 8007764:	2201      	movs	r2, #1
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f920 	bl	80079ae <USBD_CtlSendData>
        break;
 800776e:	e00c      	b.n	800778a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	2201      	movs	r2, #1
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f918 	bl	80079ae <USBD_CtlSendData>
        break;
 800777e:	e004      	b.n	800778a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f8a9 	bl	80078da <USBD_CtlError>
        break;
 8007788:	bf00      	nop
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	3b01      	subs	r3, #1
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d81e      	bhi.n	80077e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	88db      	ldrh	r3, [r3, #6]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d004      	beq.n	80077ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f891 	bl	80078da <USBD_CtlError>
        break;
 80077b8:	e01a      	b.n	80077f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f043 0202 	orr.w	r2, r3, #2
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	330c      	adds	r3, #12
 80077da:	2202      	movs	r2, #2
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f8e5 	bl	80079ae <USBD_CtlSendData>
      break;
 80077e4:	e004      	b.n	80077f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f876 	bl	80078da <USBD_CtlError>
      break;
 80077ee:	bf00      	nop
  }
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	885b      	ldrh	r3, [r3, #2]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d106      	bne.n	8007818 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f929 	bl	8007a6a <USBD_CtlSendStatus>
  }
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007830:	3b01      	subs	r3, #1
 8007832:	2b02      	cmp	r3, #2
 8007834:	d80b      	bhi.n	800784e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10c      	bne.n	8007858 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f90f 	bl	8007a6a <USBD_CtlSendStatus>
      }
      break;
 800784c:	e004      	b.n	8007858 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f842 	bl	80078da <USBD_CtlError>
      break;
 8007856:	e000      	b.n	800785a <USBD_ClrFeature+0x3a>
      break;
 8007858:	bf00      	nop
  }
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	785a      	ldrb	r2, [r3, #1]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	3302      	adds	r3, #2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29a      	uxth	r2, r3
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	3303      	adds	r3, #3
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	b29b      	uxth	r3, r3
 8007890:	4413      	add	r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	3304      	adds	r3, #4
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	3305      	adds	r3, #5
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4413      	add	r3, r2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	3306      	adds	r3, #6
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	3307      	adds	r3, #7
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4413      	add	r3, r2
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	80da      	strh	r2, [r3, #6]

}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr

080078da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fc76 	bl	80081d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078ec:	2100      	movs	r1, #0
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fc72 	bl	80081d8 <USBD_LL_StallEP>
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d032      	beq.n	8007978 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f834 	bl	8007980 <USBD_GetLen>
 8007918:	4603      	mov	r3, r0
 800791a:	3301      	adds	r3, #1
 800791c:	b29b      	uxth	r3, r3
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	75fa      	strb	r2, [r7, #23]
 800792c:	461a      	mov	r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4413      	add	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	75fa      	strb	r2, [r7, #23]
 800793e:	461a      	mov	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4413      	add	r3, r2
 8007944:	2203      	movs	r2, #3
 8007946:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007948:	e012      	b.n	8007970 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	60fa      	str	r2, [r7, #12]
 8007950:	7dfa      	ldrb	r2, [r7, #23]
 8007952:	1c51      	adds	r1, r2, #1
 8007954:	75f9      	strb	r1, [r7, #23]
 8007956:	4611      	mov	r1, r2
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	440a      	add	r2, r1
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	75fa      	strb	r2, [r7, #23]
 8007966:	461a      	mov	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4413      	add	r3, r2
 800796c:	2200      	movs	r2, #0
 800796e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e8      	bne.n	800794a <USBD_GetString+0x4e>
    }
  }
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800798c:	e005      	b.n	800799a <USBD_GetLen+0x1a>
  {
    len++;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	3301      	adds	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3301      	adds	r3, #1
 8007998:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f5      	bne.n	800798e <USBD_GetLen+0xe>
  }

  return len;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr

080079ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	4613      	mov	r3, r2
 80079ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2202      	movs	r2, #2
 80079c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079ca:	88fa      	ldrh	r2, [r7, #6]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	2100      	movs	r1, #0
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fc87 	bl	80082ea <USBD_LL_Transmit>

  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	2100      	movs	r1, #0
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fc75 	bl	80082ea <USBD_LL_Transmit>

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	4613      	mov	r3, r2
 8007a16:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fc7a 	bl	8008330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fc68 	bl	8008330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2204      	movs	r2, #4
 8007a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc32 	bl	80082ea <USBD_LL_Transmit>

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2205      	movs	r2, #5
 8007a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc42 	bl	8008330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007abc:	2200      	movs	r2, #0
 8007abe:	4912      	ldr	r1, [pc, #72]	; (8007b08 <MX_USB_DEVICE_Init+0x50>)
 8007ac0:	4812      	ldr	r0, [pc, #72]	; (8007b0c <MX_USB_DEVICE_Init+0x54>)
 8007ac2:	f7fe ff5e 	bl	8006982 <USBD_Init>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007acc:	f7f8 fee2 	bl	8000894 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ad0:	490f      	ldr	r1, [pc, #60]	; (8007b10 <MX_USB_DEVICE_Init+0x58>)
 8007ad2:	480e      	ldr	r0, [pc, #56]	; (8007b0c <MX_USB_DEVICE_Init+0x54>)
 8007ad4:	f7fe ff80 	bl	80069d8 <USBD_RegisterClass>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ade:	f7f8 fed9 	bl	8000894 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ae2:	490c      	ldr	r1, [pc, #48]	; (8007b14 <MX_USB_DEVICE_Init+0x5c>)
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <MX_USB_DEVICE_Init+0x54>)
 8007ae6:	f7fe feb1 	bl	800684c <USBD_CDC_RegisterInterface>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007af0:	f7f8 fed0 	bl	8000894 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007af4:	4805      	ldr	r0, [pc, #20]	; (8007b0c <MX_USB_DEVICE_Init+0x54>)
 8007af6:	f7fe ff88 	bl	8006a0a <USBD_Start>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b00:	f7f8 fec8 	bl	8000894 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b04:	bf00      	nop
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	2000012c 	.word	0x2000012c
 8007b0c:	2000058c 	.word	0x2000058c
 8007b10:	20000018 	.word	0x20000018
 8007b14:	2000011c 	.word	0x2000011c

08007b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4905      	ldr	r1, [pc, #20]	; (8007b34 <CDC_Init_FS+0x1c>)
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <CDC_Init_FS+0x20>)
 8007b22:	f7fe fea9 	bl	8006878 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b26:	4905      	ldr	r1, [pc, #20]	; (8007b3c <CDC_Init_FS+0x24>)
 8007b28:	4803      	ldr	r0, [pc, #12]	; (8007b38 <CDC_Init_FS+0x20>)
 8007b2a:	f7fe febe 	bl	80068aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20000c38 	.word	0x20000c38
 8007b38:	2000058c 	.word	0x2000058c
 8007b3c:	20000850 	.word	0x20000850

08007b40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr
	...

08007b50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	2b23      	cmp	r3, #35	; 0x23
 8007b64:	d84a      	bhi.n	8007bfc <CDC_Control_FS+0xac>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <CDC_Control_FS+0x1c>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007bfd 	.word	0x08007bfd
 8007b70:	08007bfd 	.word	0x08007bfd
 8007b74:	08007bfd 	.word	0x08007bfd
 8007b78:	08007bfd 	.word	0x08007bfd
 8007b7c:	08007bfd 	.word	0x08007bfd
 8007b80:	08007bfd 	.word	0x08007bfd
 8007b84:	08007bfd 	.word	0x08007bfd
 8007b88:	08007bfd 	.word	0x08007bfd
 8007b8c:	08007bfd 	.word	0x08007bfd
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007bfd 	.word	0x08007bfd
 8007b98:	08007bfd 	.word	0x08007bfd
 8007b9c:	08007bfd 	.word	0x08007bfd
 8007ba0:	08007bfd 	.word	0x08007bfd
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	08007bfd 	.word	0x08007bfd
 8007bb4:	08007bfd 	.word	0x08007bfd
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007bfd 	.word	0x08007bfd
 8007bc0:	08007bfd 	.word	0x08007bfd
 8007bc4:	08007bfd 	.word	0x08007bfd
 8007bc8:	08007bfd 	.word	0x08007bfd
 8007bcc:	08007bfd 	.word	0x08007bfd
 8007bd0:	08007bfd 	.word	0x08007bfd
 8007bd4:	08007bfd 	.word	0x08007bfd
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007bfd 	.word	0x08007bfd
 8007be0:	08007bfd 	.word	0x08007bfd
 8007be4:	08007bfd 	.word	0x08007bfd
 8007be8:	08007bfd 	.word	0x08007bfd
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007bfd 	.word	0x08007bfd
 8007bf4:	08007bfd 	.word	0x08007bfd
 8007bf8:	08007bfd 	.word	0x08007bfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007bfc:	bf00      	nop
  }

  return (USBD_OK);
 8007bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop

08007c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	4813      	ldr	r0, [pc, #76]	; (8007c68 <CDC_Receive_FS+0x5c>)
 8007c1a:	f7fe fe46 	bl	80068aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c1e:	4812      	ldr	r0, [pc, #72]	; (8007c68 <CDC_Receive_FS+0x5c>)
 8007c20:	f7fe fe85 	bl	800692e <USBD_CDC_ReceivePacket>

    memset((uint8_t *)uart_buf, '\0', 0x100);  // clear the buffer
 8007c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4810      	ldr	r0, [pc, #64]	; (8007c6c <CDC_Receive_FS+0x60>)
 8007c2c:	f000 fc3a 	bl	80084a4 <memset>
	uart_len = *Len;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <CDC_Receive_FS+0x64>)
 8007c38:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t *)uart_buf, Buf, uart_len);  // copy the data to the buffer
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <CDC_Receive_FS+0x64>)
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	480a      	ldr	r0, [pc, #40]	; (8007c6c <CDC_Receive_FS+0x60>)
 8007c44:	f000 fc20 	bl	8008488 <memcpy>
	memset(Buf, '\0', uart_len);   // clear the Buf also
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <CDC_Receive_FS+0x64>)
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	2100      	movs	r1, #0
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fc27 	bl	80084a4 <memset>
	cdc_recv_flag = 1;
 8007c56:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <CDC_Receive_FS+0x68>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8007c5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	2000058c 	.word	0x2000058c
 8007c6c:	200001fc 	.word	0x200001fc
 8007c70:	200002fc 	.word	0x200002fc
 8007c74:	200002fe 	.word	0x200002fe

08007c78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c88:	4b0d      	ldr	r3, [pc, #52]	; (8007cc0 <CDC_Transmit_FS+0x48>)
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e00b      	b.n	8007cb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c9e:	887b      	ldrh	r3, [r7, #2]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4806      	ldr	r0, [pc, #24]	; (8007cc0 <CDC_Transmit_FS+0x48>)
 8007ca6:	f7fe fde7 	bl	8006878 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007caa:	4805      	ldr	r0, [pc, #20]	; (8007cc0 <CDC_Transmit_FS+0x48>)
 8007cac:	f7fe fe10 	bl	80068d0 <USBD_CDC_TransmitPacket>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000058c 	.word	0x2000058c

08007cc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2212      	movs	r2, #18
 8007cd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cd6:	4b03      	ldr	r3, [pc, #12]	; (8007ce4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000148 	.word	0x20000148

08007ce8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	6039      	str	r1, [r7, #0]
 8007cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cfa:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	2000015c 	.word	0x2000015c

08007d0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	6039      	str	r1, [r7, #0]
 8007d16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4907      	ldr	r1, [pc, #28]	; (8007d40 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d22:	4808      	ldr	r0, [pc, #32]	; (8007d44 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d24:	f7ff fdea 	bl	80078fc <USBD_GetString>
 8007d28:	e004      	b.n	8007d34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4904      	ldr	r1, [pc, #16]	; (8007d40 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d2e:	4805      	ldr	r0, [pc, #20]	; (8007d44 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d30:	f7ff fde4 	bl	80078fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d34:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20001020 	.word	0x20001020
 8007d44:	08008d48 	.word	0x08008d48

08007d48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	6039      	str	r1, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	4904      	ldr	r1, [pc, #16]	; (8007d68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d58:	4804      	ldr	r0, [pc, #16]	; (8007d6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d5a:	f7ff fdcf 	bl	80078fc <USBD_GetString>
  return USBD_StrDesc;
 8007d5e:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20001020 	.word	0x20001020
 8007d6c:	08008d60 	.word	0x08008d60

08007d70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	221a      	movs	r2, #26
 8007d80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d82:	f000 f843 	bl	8007e0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d86:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000160 	.word	0x20000160

08007d94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4907      	ldr	r1, [pc, #28]	; (8007dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007daa:	4808      	ldr	r0, [pc, #32]	; (8007dcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dac:	f7ff fda6 	bl	80078fc <USBD_GetString>
 8007db0:	e004      	b.n	8007dbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4904      	ldr	r1, [pc, #16]	; (8007dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007db6:	4805      	ldr	r0, [pc, #20]	; (8007dcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007db8:	f7ff fda0 	bl	80078fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dbc:	4b02      	ldr	r3, [pc, #8]	; (8007dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001020 	.word	0x20001020
 8007dcc:	08008d74 	.word	0x08008d74

08007dd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d105      	bne.n	8007dee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	4907      	ldr	r1, [pc, #28]	; (8007e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007de6:	4808      	ldr	r0, [pc, #32]	; (8007e08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007de8:	f7ff fd88 	bl	80078fc <USBD_GetString>
 8007dec:	e004      	b.n	8007df8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	4904      	ldr	r1, [pc, #16]	; (8007e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007df2:	4805      	ldr	r0, [pc, #20]	; (8007e08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007df4:	f7ff fd82 	bl	80078fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007df8:	4b02      	ldr	r3, [pc, #8]	; (8007e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	20001020 	.word	0x20001020
 8007e08:	08008d80 	.word	0x08008d80

08007e0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <Get_SerialNum+0x44>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <Get_SerialNum+0x48>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <Get_SerialNum+0x4c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4413      	add	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e32:	2208      	movs	r2, #8
 8007e34:	4909      	ldr	r1, [pc, #36]	; (8007e5c <Get_SerialNum+0x50>)
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f814 	bl	8007e64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	4908      	ldr	r1, [pc, #32]	; (8007e60 <Get_SerialNum+0x54>)
 8007e40:	68b8      	ldr	r0, [r7, #8]
 8007e42:	f000 f80f 	bl	8007e64 <IntToUnicode>
  }
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	1ffff7e8 	.word	0x1ffff7e8
 8007e54:	1ffff7ec 	.word	0x1ffff7ec
 8007e58:	1ffff7f0 	.word	0x1ffff7f0
 8007e5c:	20000162 	.word	0x20000162
 8007e60:	20000172 	.word	0x20000172

08007e64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e76:	2300      	movs	r3, #0
 8007e78:	75fb      	strb	r3, [r7, #23]
 8007e7a:	e027      	b.n	8007ecc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	0f1b      	lsrs	r3, r3, #28
 8007e80:	2b09      	cmp	r3, #9
 8007e82:	d80b      	bhi.n	8007e9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	0f1b      	lsrs	r3, r3, #28
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	440b      	add	r3, r1
 8007e94:	3230      	adds	r2, #48	; 0x30
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e00a      	b.n	8007eb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	0f1b      	lsrs	r3, r3, #28
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	440b      	add	r3, r1
 8007eac:	3237      	adds	r2, #55	; 0x37
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
 8007ecc:	7dfa      	ldrb	r2, [r7, #23]
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d3d3      	bcc.n	8007e7c <IntToUnicode+0x18>
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr

08007ee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a0d      	ldr	r2, [pc, #52]	; (8007f24 <HAL_PCD_MspInit+0x44>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d113      	bne.n	8007f1a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <HAL_PCD_MspInit+0x48>)
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	; (8007f28 <HAL_PCD_MspInit+0x48>)
 8007ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007efc:	61d3      	str	r3, [r2, #28]
 8007efe:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <HAL_PCD_MspInit+0x48>)
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	2014      	movs	r0, #20
 8007f10:	f7f8 ff33 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f14:	2014      	movs	r0, #20
 8007f16:	f7f8 ff4c 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40005c00 	.word	0x40005c00
 8007f28:	40021000 	.word	0x40021000

08007f2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f7fe fda9 	bl	8006a9a <USBD_LL_SetupStage>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	440b      	add	r3, r1
 8007f70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7fe fddb 	bl	8006b34 <USBD_LL_DataOutStage>
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	440b      	add	r3, r1
 8007fa6:	333c      	adds	r3, #60	; 0x3c
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	4619      	mov	r1, r3
 8007fae:	f7fe fe32 	bl	8006c16 <USBD_LL_DataInStage>
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe ff42 	bl	8006e52 <USBD_LL_SOF>
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d001      	beq.n	8007fee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fea:	f7f8 fc53 	bl	8000894 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ff4:	7bfa      	ldrb	r2, [r7, #15]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fef2 	bl	8006de2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe feab 	bl	8006d60 <USBD_LL_Reset>
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe feec 	bl	8006e00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008030:	4b04      	ldr	r3, [pc, #16]	; (8008044 <HAL_PCD_SuspendCallback+0x30>)
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	4a03      	ldr	r2, [pc, #12]	; (8008044 <HAL_PCD_SuspendCallback+0x30>)
 8008036:	f043 0306 	orr.w	r3, r3, #6
 800803a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed00 	.word	0xe000ed00

08008048 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fee6 	bl	8006e28 <USBD_LL_Resume>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800806c:	4a28      	ldr	r2, [pc, #160]	; (8008110 <USBD_LL_Init+0xac>)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a26      	ldr	r2, [pc, #152]	; (8008110 <USBD_LL_Init+0xac>)
 8008078:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <USBD_LL_Init+0xac>)
 800807e:	4a25      	ldr	r2, [pc, #148]	; (8008114 <USBD_LL_Init+0xb0>)
 8008080:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <USBD_LL_Init+0xac>)
 8008084:	2208      	movs	r2, #8
 8008086:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008088:	4b21      	ldr	r3, [pc, #132]	; (8008110 <USBD_LL_Init+0xac>)
 800808a:	2202      	movs	r2, #2
 800808c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800808e:	4b20      	ldr	r3, [pc, #128]	; (8008110 <USBD_LL_Init+0xac>)
 8008090:	2200      	movs	r2, #0
 8008092:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <USBD_LL_Init+0xac>)
 8008096:	2200      	movs	r2, #0
 8008098:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800809a:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <USBD_LL_Init+0xac>)
 800809c:	2200      	movs	r2, #0
 800809e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80080a0:	481b      	ldr	r0, [pc, #108]	; (8008110 <USBD_LL_Init+0xac>)
 80080a2:	f7f9 f83d 	bl	8001120 <HAL_PCD_Init>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80080ac:	f7f8 fbf2 	bl	8000894 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080b6:	2318      	movs	r3, #24
 80080b8:	2200      	movs	r2, #0
 80080ba:	2100      	movs	r1, #0
 80080bc:	f7fa fcb3 	bl	8002a26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080c6:	2358      	movs	r3, #88	; 0x58
 80080c8:	2200      	movs	r2, #0
 80080ca:	2180      	movs	r1, #128	; 0x80
 80080cc:	f7fa fcab 	bl	8002a26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080d6:	23c0      	movs	r3, #192	; 0xc0
 80080d8:	2200      	movs	r2, #0
 80080da:	2181      	movs	r1, #129	; 0x81
 80080dc:	f7fa fca3 	bl	8002a26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80080ea:	2200      	movs	r2, #0
 80080ec:	2101      	movs	r1, #1
 80080ee:	f7fa fc9a 	bl	8002a26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080fc:	2200      	movs	r2, #0
 80080fe:	2182      	movs	r1, #130	; 0x82
 8008100:	f7fa fc91 	bl	8002a26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20001220 	.word	0x20001220
 8008114:	40005c00 	.word	0x40005c00

08008118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800812e:	4618      	mov	r0, r3
 8008130:	f7f9 f901 	bl	8001336 <HAL_PCD_Start>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f94e 	bl	80083dc <USBD_Get_USB_Status>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008144:	7bbb      	ldrb	r3, [r7, #14]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	4608      	mov	r0, r1
 8008158:	4611      	mov	r1, r2
 800815a:	461a      	mov	r2, r3
 800815c:	4603      	mov	r3, r0
 800815e:	70fb      	strb	r3, [r7, #3]
 8008160:	460b      	mov	r3, r1
 8008162:	70bb      	strb	r3, [r7, #2]
 8008164:	4613      	mov	r3, r2
 8008166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008176:	78bb      	ldrb	r3, [r7, #2]
 8008178:	883a      	ldrh	r2, [r7, #0]
 800817a:	78f9      	ldrb	r1, [r7, #3]
 800817c:	f7f9 fa7b 	bl	8001676 <HAL_PCD_EP_Open>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f928 	bl	80083dc <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7f9 fac2 	bl	8001742 <HAL_PCD_EP_Close>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f909 	bl	80083dc <USBD_Get_USB_Status>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	4611      	mov	r1, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7f9 fb82 	bl	8001900 <HAL_PCD_EP_SetStall>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f8ea 	bl	80083dc <USBD_Get_USB_Status>
 8008208:	4603      	mov	r3, r0
 800820a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800820c:	7bbb      	ldrb	r3, [r7, #14]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f7f9 fbc3 	bl	80019c0 <HAL_PCD_EP_ClrStall>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 f8cb 	bl	80083dc <USBD_Get_USB_Status>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800824a:	7bbb      	ldrb	r3, [r7, #14]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	da0c      	bge.n	800828a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	440b      	add	r3, r1
 8008284:	3302      	adds	r3, #2
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	e00b      	b.n	80082a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008290:	68f9      	ldr	r1, [r7, #12]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	440b      	add	r3, r1
 800829c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80082a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f9 f9ae 	bl	800162c <HAL_PCD_SetAddress>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f880 	bl	80083dc <USBD_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	461a      	mov	r2, r3
 80082f6:	460b      	mov	r3, r1
 80082f8:	72fb      	strb	r3, [r7, #11]
 80082fa:	4613      	mov	r3, r2
 80082fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800830c:	893b      	ldrh	r3, [r7, #8]
 800830e:	7af9      	ldrb	r1, [r7, #11]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	f7f9 fab2 	bl	800187a <HAL_PCD_EP_Transmit>
 8008316:	4603      	mov	r3, r0
 8008318:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f85d 	bl	80083dc <USBD_Get_USB_Status>
 8008322:	4603      	mov	r3, r0
 8008324:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008326:	7dbb      	ldrb	r3, [r7, #22]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	461a      	mov	r2, r3
 800833c:	460b      	mov	r3, r1
 800833e:	72fb      	strb	r3, [r7, #11]
 8008340:	4613      	mov	r3, r2
 8008342:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008352:	893b      	ldrh	r3, [r7, #8]
 8008354:	7af9      	ldrb	r1, [r7, #11]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	f7f9 fa3b 	bl	80017d2 <HAL_PCD_EP_Receive>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f83a 	bl	80083dc <USBD_Get_USB_Status>
 8008368:	4603      	mov	r3, r0
 800836a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800836c:	7dbb      	ldrb	r3, [r7, #22]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	460b      	mov	r3, r1
 8008380:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008388:	78fa      	ldrb	r2, [r7, #3]
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f7f9 fa5d 	bl	800184c <HAL_PCD_EP_GetRxCount>
 8008392:	4603      	mov	r3, r0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <USBD_static_malloc+0x14>)
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr
 80083b0:	20000308 	.word	0x20000308

080083b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]

}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr

080083c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d817      	bhi.n	8008420 <USBD_Get_USB_Status+0x44>
 80083f0:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <USBD_Get_USB_Status+0x1c>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	08008409 	.word	0x08008409
 80083fc:	0800840f 	.word	0x0800840f
 8008400:	08008415 	.word	0x08008415
 8008404:	0800841b 	.word	0x0800841b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
    break;
 800840c:	e00b      	b.n	8008426 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800840e:	2302      	movs	r3, #2
 8008410:	73fb      	strb	r3, [r7, #15]
    break;
 8008412:	e008      	b.n	8008426 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
    break;
 8008418:	e005      	b.n	8008426 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800841a:	2302      	movs	r3, #2
 800841c:	73fb      	strb	r3, [r7, #15]
    break;
 800841e:	e002      	b.n	8008426 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008420:	2302      	movs	r3, #2
 8008422:	73fb      	strb	r3, [r7, #15]
    break;
 8008424:	bf00      	nop
  }
  return usb_status;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop

08008434 <__errno>:
 8008434:	4b01      	ldr	r3, [pc, #4]	; (800843c <__errno+0x8>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	2000017c 	.word	0x2000017c

08008440 <__libc_init_array>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	2600      	movs	r6, #0
 8008444:	4d0c      	ldr	r5, [pc, #48]	; (8008478 <__libc_init_array+0x38>)
 8008446:	4c0d      	ldr	r4, [pc, #52]	; (800847c <__libc_init_array+0x3c>)
 8008448:	1b64      	subs	r4, r4, r5
 800844a:	10a4      	asrs	r4, r4, #2
 800844c:	42a6      	cmp	r6, r4
 800844e:	d109      	bne.n	8008464 <__libc_init_array+0x24>
 8008450:	f000 fc5c 	bl	8008d0c <_init>
 8008454:	2600      	movs	r6, #0
 8008456:	4d0a      	ldr	r5, [pc, #40]	; (8008480 <__libc_init_array+0x40>)
 8008458:	4c0a      	ldr	r4, [pc, #40]	; (8008484 <__libc_init_array+0x44>)
 800845a:	1b64      	subs	r4, r4, r5
 800845c:	10a4      	asrs	r4, r4, #2
 800845e:	42a6      	cmp	r6, r4
 8008460:	d105      	bne.n	800846e <__libc_init_array+0x2e>
 8008462:	bd70      	pop	{r4, r5, r6, pc}
 8008464:	f855 3b04 	ldr.w	r3, [r5], #4
 8008468:	4798      	blx	r3
 800846a:	3601      	adds	r6, #1
 800846c:	e7ee      	b.n	800844c <__libc_init_array+0xc>
 800846e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008472:	4798      	blx	r3
 8008474:	3601      	adds	r6, #1
 8008476:	e7f2      	b.n	800845e <__libc_init_array+0x1e>
 8008478:	08008ddc 	.word	0x08008ddc
 800847c:	08008ddc 	.word	0x08008ddc
 8008480:	08008ddc 	.word	0x08008ddc
 8008484:	08008de0 	.word	0x08008de0

08008488 <memcpy>:
 8008488:	440a      	add	r2, r1
 800848a:	4291      	cmp	r1, r2
 800848c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008490:	d100      	bne.n	8008494 <memcpy+0xc>
 8008492:	4770      	bx	lr
 8008494:	b510      	push	{r4, lr}
 8008496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800849a:	4291      	cmp	r1, r2
 800849c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a0:	d1f9      	bne.n	8008496 <memcpy+0xe>
 80084a2:	bd10      	pop	{r4, pc}

080084a4 <memset>:
 80084a4:	4603      	mov	r3, r0
 80084a6:	4402      	add	r2, r0
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d100      	bne.n	80084ae <memset+0xa>
 80084ac:	4770      	bx	lr
 80084ae:	f803 1b01 	strb.w	r1, [r3], #1
 80084b2:	e7f9      	b.n	80084a8 <memset+0x4>

080084b4 <siprintf>:
 80084b4:	b40e      	push	{r1, r2, r3}
 80084b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084ba:	b500      	push	{lr}
 80084bc:	b09c      	sub	sp, #112	; 0x70
 80084be:	ab1d      	add	r3, sp, #116	; 0x74
 80084c0:	9002      	str	r0, [sp, #8]
 80084c2:	9006      	str	r0, [sp, #24]
 80084c4:	9107      	str	r1, [sp, #28]
 80084c6:	9104      	str	r1, [sp, #16]
 80084c8:	4808      	ldr	r0, [pc, #32]	; (80084ec <siprintf+0x38>)
 80084ca:	4909      	ldr	r1, [pc, #36]	; (80084f0 <siprintf+0x3c>)
 80084cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d0:	9105      	str	r1, [sp, #20]
 80084d2:	6800      	ldr	r0, [r0, #0]
 80084d4:	a902      	add	r1, sp, #8
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	f000 f868 	bl	80085ac <_svfiprintf_r>
 80084dc:	2200      	movs	r2, #0
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	b01c      	add	sp, #112	; 0x70
 80084e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e8:	b003      	add	sp, #12
 80084ea:	4770      	bx	lr
 80084ec:	2000017c 	.word	0x2000017c
 80084f0:	ffff0208 	.word	0xffff0208

080084f4 <__ssputs_r>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	688e      	ldr	r6, [r1, #8]
 80084fa:	4682      	mov	sl, r0
 80084fc:	429e      	cmp	r6, r3
 80084fe:	460c      	mov	r4, r1
 8008500:	4690      	mov	r8, r2
 8008502:	461f      	mov	r7, r3
 8008504:	d838      	bhi.n	8008578 <__ssputs_r+0x84>
 8008506:	898a      	ldrh	r2, [r1, #12]
 8008508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800850c:	d032      	beq.n	8008574 <__ssputs_r+0x80>
 800850e:	6825      	ldr	r5, [r4, #0]
 8008510:	6909      	ldr	r1, [r1, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	eba5 0901 	sub.w	r9, r5, r1
 8008518:	6965      	ldr	r5, [r4, #20]
 800851a:	444b      	add	r3, r9
 800851c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008524:	106d      	asrs	r5, r5, #1
 8008526:	429d      	cmp	r5, r3
 8008528:	bf38      	it	cc
 800852a:	461d      	movcc	r5, r3
 800852c:	0553      	lsls	r3, r2, #21
 800852e:	d531      	bpl.n	8008594 <__ssputs_r+0xa0>
 8008530:	4629      	mov	r1, r5
 8008532:	f000 fb45 	bl	8008bc0 <_malloc_r>
 8008536:	4606      	mov	r6, r0
 8008538:	b950      	cbnz	r0, 8008550 <__ssputs_r+0x5c>
 800853a:	230c      	movs	r3, #12
 800853c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008540:	f8ca 3000 	str.w	r3, [sl]
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008550:	464a      	mov	r2, r9
 8008552:	6921      	ldr	r1, [r4, #16]
 8008554:	f7ff ff98 	bl	8008488 <memcpy>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800855e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	6126      	str	r6, [r4, #16]
 8008566:	444e      	add	r6, r9
 8008568:	6026      	str	r6, [r4, #0]
 800856a:	463e      	mov	r6, r7
 800856c:	6165      	str	r5, [r4, #20]
 800856e:	eba5 0509 	sub.w	r5, r5, r9
 8008572:	60a5      	str	r5, [r4, #8]
 8008574:	42be      	cmp	r6, r7
 8008576:	d900      	bls.n	800857a <__ssputs_r+0x86>
 8008578:	463e      	mov	r6, r7
 800857a:	4632      	mov	r2, r6
 800857c:	4641      	mov	r1, r8
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	f000 fab8 	bl	8008af4 <memmove>
 8008584:	68a3      	ldr	r3, [r4, #8]
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	1b9b      	subs	r3, r3, r6
 800858a:	4432      	add	r2, r6
 800858c:	2000      	movs	r0, #0
 800858e:	60a3      	str	r3, [r4, #8]
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	e7db      	b.n	800854c <__ssputs_r+0x58>
 8008594:	462a      	mov	r2, r5
 8008596:	f000 fb6d 	bl	8008c74 <_realloc_r>
 800859a:	4606      	mov	r6, r0
 800859c:	2800      	cmp	r0, #0
 800859e:	d1e1      	bne.n	8008564 <__ssputs_r+0x70>
 80085a0:	4650      	mov	r0, sl
 80085a2:	6921      	ldr	r1, [r4, #16]
 80085a4:	f000 fac0 	bl	8008b28 <_free_r>
 80085a8:	e7c7      	b.n	800853a <__ssputs_r+0x46>
	...

080085ac <_svfiprintf_r>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	4698      	mov	r8, r3
 80085b2:	898b      	ldrh	r3, [r1, #12]
 80085b4:	4607      	mov	r7, r0
 80085b6:	061b      	lsls	r3, r3, #24
 80085b8:	460d      	mov	r5, r1
 80085ba:	4614      	mov	r4, r2
 80085bc:	b09d      	sub	sp, #116	; 0x74
 80085be:	d50e      	bpl.n	80085de <_svfiprintf_r+0x32>
 80085c0:	690b      	ldr	r3, [r1, #16]
 80085c2:	b963      	cbnz	r3, 80085de <_svfiprintf_r+0x32>
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	f000 fafb 	bl	8008bc0 <_malloc_r>
 80085ca:	6028      	str	r0, [r5, #0]
 80085cc:	6128      	str	r0, [r5, #16]
 80085ce:	b920      	cbnz	r0, 80085da <_svfiprintf_r+0x2e>
 80085d0:	230c      	movs	r3, #12
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d8:	e0d1      	b.n	800877e <_svfiprintf_r+0x1d2>
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	616b      	str	r3, [r5, #20]
 80085de:	2300      	movs	r3, #0
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
 80085e2:	2320      	movs	r3, #32
 80085e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085e8:	2330      	movs	r3, #48	; 0x30
 80085ea:	f04f 0901 	mov.w	r9, #1
 80085ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80085f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008798 <_svfiprintf_r+0x1ec>
 80085f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085fa:	4623      	mov	r3, r4
 80085fc:	469a      	mov	sl, r3
 80085fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008602:	b10a      	cbz	r2, 8008608 <_svfiprintf_r+0x5c>
 8008604:	2a25      	cmp	r2, #37	; 0x25
 8008606:	d1f9      	bne.n	80085fc <_svfiprintf_r+0x50>
 8008608:	ebba 0b04 	subs.w	fp, sl, r4
 800860c:	d00b      	beq.n	8008626 <_svfiprintf_r+0x7a>
 800860e:	465b      	mov	r3, fp
 8008610:	4622      	mov	r2, r4
 8008612:	4629      	mov	r1, r5
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ff6d 	bl	80084f4 <__ssputs_r>
 800861a:	3001      	adds	r0, #1
 800861c:	f000 80aa 	beq.w	8008774 <_svfiprintf_r+0x1c8>
 8008620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008622:	445a      	add	r2, fp
 8008624:	9209      	str	r2, [sp, #36]	; 0x24
 8008626:	f89a 3000 	ldrb.w	r3, [sl]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80a2 	beq.w	8008774 <_svfiprintf_r+0x1c8>
 8008630:	2300      	movs	r3, #0
 8008632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800863a:	f10a 0a01 	add.w	sl, sl, #1
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	9307      	str	r3, [sp, #28]
 8008642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008646:	931a      	str	r3, [sp, #104]	; 0x68
 8008648:	4654      	mov	r4, sl
 800864a:	2205      	movs	r2, #5
 800864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008650:	4851      	ldr	r0, [pc, #324]	; (8008798 <_svfiprintf_r+0x1ec>)
 8008652:	f000 fa41 	bl	8008ad8 <memchr>
 8008656:	9a04      	ldr	r2, [sp, #16]
 8008658:	b9d8      	cbnz	r0, 8008692 <_svfiprintf_r+0xe6>
 800865a:	06d0      	lsls	r0, r2, #27
 800865c:	bf44      	itt	mi
 800865e:	2320      	movmi	r3, #32
 8008660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008664:	0711      	lsls	r1, r2, #28
 8008666:	bf44      	itt	mi
 8008668:	232b      	movmi	r3, #43	; 0x2b
 800866a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866e:	f89a 3000 	ldrb.w	r3, [sl]
 8008672:	2b2a      	cmp	r3, #42	; 0x2a
 8008674:	d015      	beq.n	80086a2 <_svfiprintf_r+0xf6>
 8008676:	4654      	mov	r4, sl
 8008678:	2000      	movs	r0, #0
 800867a:	f04f 0c0a 	mov.w	ip, #10
 800867e:	9a07      	ldr	r2, [sp, #28]
 8008680:	4621      	mov	r1, r4
 8008682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008686:	3b30      	subs	r3, #48	; 0x30
 8008688:	2b09      	cmp	r3, #9
 800868a:	d94e      	bls.n	800872a <_svfiprintf_r+0x17e>
 800868c:	b1b0      	cbz	r0, 80086bc <_svfiprintf_r+0x110>
 800868e:	9207      	str	r2, [sp, #28]
 8008690:	e014      	b.n	80086bc <_svfiprintf_r+0x110>
 8008692:	eba0 0308 	sub.w	r3, r0, r8
 8008696:	fa09 f303 	lsl.w	r3, r9, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	46a2      	mov	sl, r4
 800869e:	9304      	str	r3, [sp, #16]
 80086a0:	e7d2      	b.n	8008648 <_svfiprintf_r+0x9c>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	1d19      	adds	r1, r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9103      	str	r1, [sp, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfbb      	ittet	lt
 80086ae:	425b      	neglt	r3, r3
 80086b0:	f042 0202 	orrlt.w	r2, r2, #2
 80086b4:	9307      	strge	r3, [sp, #28]
 80086b6:	9307      	strlt	r3, [sp, #28]
 80086b8:	bfb8      	it	lt
 80086ba:	9204      	strlt	r2, [sp, #16]
 80086bc:	7823      	ldrb	r3, [r4, #0]
 80086be:	2b2e      	cmp	r3, #46	; 0x2e
 80086c0:	d10c      	bne.n	80086dc <_svfiprintf_r+0x130>
 80086c2:	7863      	ldrb	r3, [r4, #1]
 80086c4:	2b2a      	cmp	r3, #42	; 0x2a
 80086c6:	d135      	bne.n	8008734 <_svfiprintf_r+0x188>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	3402      	adds	r4, #2
 80086cc:	1d1a      	adds	r2, r3, #4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	9203      	str	r2, [sp, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	bfb8      	it	lt
 80086d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087a8 <_svfiprintf_r+0x1fc>
 80086e0:	2203      	movs	r2, #3
 80086e2:	4650      	mov	r0, sl
 80086e4:	7821      	ldrb	r1, [r4, #0]
 80086e6:	f000 f9f7 	bl	8008ad8 <memchr>
 80086ea:	b140      	cbz	r0, 80086fe <_svfiprintf_r+0x152>
 80086ec:	2340      	movs	r3, #64	; 0x40
 80086ee:	eba0 000a 	sub.w	r0, r0, sl
 80086f2:	fa03 f000 	lsl.w	r0, r3, r0
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	3401      	adds	r4, #1
 80086fa:	4303      	orrs	r3, r0
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008702:	2206      	movs	r2, #6
 8008704:	4825      	ldr	r0, [pc, #148]	; (800879c <_svfiprintf_r+0x1f0>)
 8008706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800870a:	f000 f9e5 	bl	8008ad8 <memchr>
 800870e:	2800      	cmp	r0, #0
 8008710:	d038      	beq.n	8008784 <_svfiprintf_r+0x1d8>
 8008712:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <_svfiprintf_r+0x1f4>)
 8008714:	bb1b      	cbnz	r3, 800875e <_svfiprintf_r+0x1b2>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	3307      	adds	r3, #7
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	3308      	adds	r3, #8
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008724:	4433      	add	r3, r6
 8008726:	9309      	str	r3, [sp, #36]	; 0x24
 8008728:	e767      	b.n	80085fa <_svfiprintf_r+0x4e>
 800872a:	460c      	mov	r4, r1
 800872c:	2001      	movs	r0, #1
 800872e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008732:	e7a5      	b.n	8008680 <_svfiprintf_r+0xd4>
 8008734:	2300      	movs	r3, #0
 8008736:	f04f 0c0a 	mov.w	ip, #10
 800873a:	4619      	mov	r1, r3
 800873c:	3401      	adds	r4, #1
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	4620      	mov	r0, r4
 8008742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008746:	3a30      	subs	r2, #48	; 0x30
 8008748:	2a09      	cmp	r2, #9
 800874a:	d903      	bls.n	8008754 <_svfiprintf_r+0x1a8>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0c5      	beq.n	80086dc <_svfiprintf_r+0x130>
 8008750:	9105      	str	r1, [sp, #20]
 8008752:	e7c3      	b.n	80086dc <_svfiprintf_r+0x130>
 8008754:	4604      	mov	r4, r0
 8008756:	2301      	movs	r3, #1
 8008758:	fb0c 2101 	mla	r1, ip, r1, r2
 800875c:	e7f0      	b.n	8008740 <_svfiprintf_r+0x194>
 800875e:	ab03      	add	r3, sp, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	4638      	mov	r0, r7
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <_svfiprintf_r+0x1f8>)
 8008768:	a904      	add	r1, sp, #16
 800876a:	f3af 8000 	nop.w
 800876e:	1c42      	adds	r2, r0, #1
 8008770:	4606      	mov	r6, r0
 8008772:	d1d6      	bne.n	8008722 <_svfiprintf_r+0x176>
 8008774:	89ab      	ldrh	r3, [r5, #12]
 8008776:	065b      	lsls	r3, r3, #25
 8008778:	f53f af2c 	bmi.w	80085d4 <_svfiprintf_r+0x28>
 800877c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877e:	b01d      	add	sp, #116	; 0x74
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	462a      	mov	r2, r5
 800878a:	4638      	mov	r0, r7
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <_svfiprintf_r+0x1f8>)
 800878e:	a904      	add	r1, sp, #16
 8008790:	f000 f87c 	bl	800888c <_printf_i>
 8008794:	e7eb      	b.n	800876e <_svfiprintf_r+0x1c2>
 8008796:	bf00      	nop
 8008798:	08008da8 	.word	0x08008da8
 800879c:	08008db2 	.word	0x08008db2
 80087a0:	00000000 	.word	0x00000000
 80087a4:	080084f5 	.word	0x080084f5
 80087a8:	08008dae 	.word	0x08008dae

080087ac <_printf_common>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	4616      	mov	r6, r2
 80087b2:	4699      	mov	r9, r3
 80087b4:	688a      	ldr	r2, [r1, #8]
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	4607      	mov	r7, r0
 80087ba:	4293      	cmp	r3, r2
 80087bc:	bfb8      	it	lt
 80087be:	4613      	movlt	r3, r2
 80087c0:	6033      	str	r3, [r6, #0]
 80087c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c6:	460c      	mov	r4, r1
 80087c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087cc:	b10a      	cbz	r2, 80087d2 <_printf_common+0x26>
 80087ce:	3301      	adds	r3, #1
 80087d0:	6033      	str	r3, [r6, #0]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	0699      	lsls	r1, r3, #26
 80087d6:	bf42      	ittt	mi
 80087d8:	6833      	ldrmi	r3, [r6, #0]
 80087da:	3302      	addmi	r3, #2
 80087dc:	6033      	strmi	r3, [r6, #0]
 80087de:	6825      	ldr	r5, [r4, #0]
 80087e0:	f015 0506 	ands.w	r5, r5, #6
 80087e4:	d106      	bne.n	80087f4 <_printf_common+0x48>
 80087e6:	f104 0a19 	add.w	sl, r4, #25
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	6832      	ldr	r2, [r6, #0]
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	dc28      	bgt.n	8008846 <_printf_common+0x9a>
 80087f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f8:	1e13      	subs	r3, r2, #0
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	bf18      	it	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	0692      	lsls	r2, r2, #26
 8008802:	d42d      	bmi.n	8008860 <_printf_common+0xb4>
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800880c:	47c0      	blx	r8
 800880e:	3001      	adds	r0, #1
 8008810:	d020      	beq.n	8008854 <_printf_common+0xa8>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	68e5      	ldr	r5, [r4, #12]
 8008816:	f003 0306 	and.w	r3, r3, #6
 800881a:	2b04      	cmp	r3, #4
 800881c:	bf18      	it	ne
 800881e:	2500      	movne	r5, #0
 8008820:	6832      	ldr	r2, [r6, #0]
 8008822:	f04f 0600 	mov.w	r6, #0
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	bf08      	it	eq
 800882a:	1aad      	subeq	r5, r5, r2
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	bf08      	it	eq
 8008830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008834:	4293      	cmp	r3, r2
 8008836:	bfc4      	itt	gt
 8008838:	1a9b      	subgt	r3, r3, r2
 800883a:	18ed      	addgt	r5, r5, r3
 800883c:	341a      	adds	r4, #26
 800883e:	42b5      	cmp	r5, r6
 8008840:	d11a      	bne.n	8008878 <_printf_common+0xcc>
 8008842:	2000      	movs	r0, #0
 8008844:	e008      	b.n	8008858 <_printf_common+0xac>
 8008846:	2301      	movs	r3, #1
 8008848:	4652      	mov	r2, sl
 800884a:	4649      	mov	r1, r9
 800884c:	4638      	mov	r0, r7
 800884e:	47c0      	blx	r8
 8008850:	3001      	adds	r0, #1
 8008852:	d103      	bne.n	800885c <_printf_common+0xb0>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	3501      	adds	r5, #1
 800885e:	e7c4      	b.n	80087ea <_printf_common+0x3e>
 8008860:	2030      	movs	r0, #48	; 0x30
 8008862:	18e1      	adds	r1, r4, r3
 8008864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800886e:	4422      	add	r2, r4
 8008870:	3302      	adds	r3, #2
 8008872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008876:	e7c5      	b.n	8008804 <_printf_common+0x58>
 8008878:	2301      	movs	r3, #1
 800887a:	4622      	mov	r2, r4
 800887c:	4649      	mov	r1, r9
 800887e:	4638      	mov	r0, r7
 8008880:	47c0      	blx	r8
 8008882:	3001      	adds	r0, #1
 8008884:	d0e6      	beq.n	8008854 <_printf_common+0xa8>
 8008886:	3601      	adds	r6, #1
 8008888:	e7d9      	b.n	800883e <_printf_common+0x92>
	...

0800888c <_printf_i>:
 800888c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	7e27      	ldrb	r7, [r4, #24]
 8008894:	4691      	mov	r9, r2
 8008896:	2f78      	cmp	r7, #120	; 0x78
 8008898:	4680      	mov	r8, r0
 800889a:	469a      	mov	sl, r3
 800889c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800889e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088a2:	d807      	bhi.n	80088b4 <_printf_i+0x28>
 80088a4:	2f62      	cmp	r7, #98	; 0x62
 80088a6:	d80a      	bhi.n	80088be <_printf_i+0x32>
 80088a8:	2f00      	cmp	r7, #0
 80088aa:	f000 80d9 	beq.w	8008a60 <_printf_i+0x1d4>
 80088ae:	2f58      	cmp	r7, #88	; 0x58
 80088b0:	f000 80a4 	beq.w	80089fc <_printf_i+0x170>
 80088b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088bc:	e03a      	b.n	8008934 <_printf_i+0xa8>
 80088be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088c2:	2b15      	cmp	r3, #21
 80088c4:	d8f6      	bhi.n	80088b4 <_printf_i+0x28>
 80088c6:	a001      	add	r0, pc, #4	; (adr r0, 80088cc <_printf_i+0x40>)
 80088c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008939 	.word	0x08008939
 80088d4:	080088b5 	.word	0x080088b5
 80088d8:	080088b5 	.word	0x080088b5
 80088dc:	080088b5 	.word	0x080088b5
 80088e0:	080088b5 	.word	0x080088b5
 80088e4:	08008939 	.word	0x08008939
 80088e8:	080088b5 	.word	0x080088b5
 80088ec:	080088b5 	.word	0x080088b5
 80088f0:	080088b5 	.word	0x080088b5
 80088f4:	080088b5 	.word	0x080088b5
 80088f8:	08008a47 	.word	0x08008a47
 80088fc:	08008969 	.word	0x08008969
 8008900:	08008a29 	.word	0x08008a29
 8008904:	080088b5 	.word	0x080088b5
 8008908:	080088b5 	.word	0x080088b5
 800890c:	08008a69 	.word	0x08008a69
 8008910:	080088b5 	.word	0x080088b5
 8008914:	08008969 	.word	0x08008969
 8008918:	080088b5 	.word	0x080088b5
 800891c:	080088b5 	.word	0x080088b5
 8008920:	08008a31 	.word	0x08008a31
 8008924:	680b      	ldr	r3, [r1, #0]
 8008926:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800892a:	1d1a      	adds	r2, r3, #4
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	600a      	str	r2, [r1, #0]
 8008930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008934:	2301      	movs	r3, #1
 8008936:	e0a4      	b.n	8008a82 <_printf_i+0x1f6>
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	6808      	ldr	r0, [r1, #0]
 800893c:	062e      	lsls	r6, r5, #24
 800893e:	f100 0304 	add.w	r3, r0, #4
 8008942:	d50a      	bpl.n	800895a <_printf_i+0xce>
 8008944:	6805      	ldr	r5, [r0, #0]
 8008946:	600b      	str	r3, [r1, #0]
 8008948:	2d00      	cmp	r5, #0
 800894a:	da03      	bge.n	8008954 <_printf_i+0xc8>
 800894c:	232d      	movs	r3, #45	; 0x2d
 800894e:	426d      	negs	r5, r5
 8008950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008954:	230a      	movs	r3, #10
 8008956:	485e      	ldr	r0, [pc, #376]	; (8008ad0 <_printf_i+0x244>)
 8008958:	e019      	b.n	800898e <_printf_i+0x102>
 800895a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800895e:	6805      	ldr	r5, [r0, #0]
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	bf18      	it	ne
 8008964:	b22d      	sxthne	r5, r5
 8008966:	e7ef      	b.n	8008948 <_printf_i+0xbc>
 8008968:	680b      	ldr	r3, [r1, #0]
 800896a:	6825      	ldr	r5, [r4, #0]
 800896c:	1d18      	adds	r0, r3, #4
 800896e:	6008      	str	r0, [r1, #0]
 8008970:	0628      	lsls	r0, r5, #24
 8008972:	d501      	bpl.n	8008978 <_printf_i+0xec>
 8008974:	681d      	ldr	r5, [r3, #0]
 8008976:	e002      	b.n	800897e <_printf_i+0xf2>
 8008978:	0669      	lsls	r1, r5, #25
 800897a:	d5fb      	bpl.n	8008974 <_printf_i+0xe8>
 800897c:	881d      	ldrh	r5, [r3, #0]
 800897e:	2f6f      	cmp	r7, #111	; 0x6f
 8008980:	bf0c      	ite	eq
 8008982:	2308      	moveq	r3, #8
 8008984:	230a      	movne	r3, #10
 8008986:	4852      	ldr	r0, [pc, #328]	; (8008ad0 <_printf_i+0x244>)
 8008988:	2100      	movs	r1, #0
 800898a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800898e:	6866      	ldr	r6, [r4, #4]
 8008990:	2e00      	cmp	r6, #0
 8008992:	bfa8      	it	ge
 8008994:	6821      	ldrge	r1, [r4, #0]
 8008996:	60a6      	str	r6, [r4, #8]
 8008998:	bfa4      	itt	ge
 800899a:	f021 0104 	bicge.w	r1, r1, #4
 800899e:	6021      	strge	r1, [r4, #0]
 80089a0:	b90d      	cbnz	r5, 80089a6 <_printf_i+0x11a>
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d04d      	beq.n	8008a42 <_printf_i+0x1b6>
 80089a6:	4616      	mov	r6, r2
 80089a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80089ac:	fb03 5711 	mls	r7, r3, r1, r5
 80089b0:	5dc7      	ldrb	r7, [r0, r7]
 80089b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089b6:	462f      	mov	r7, r5
 80089b8:	42bb      	cmp	r3, r7
 80089ba:	460d      	mov	r5, r1
 80089bc:	d9f4      	bls.n	80089a8 <_printf_i+0x11c>
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d10b      	bne.n	80089da <_printf_i+0x14e>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	07df      	lsls	r7, r3, #31
 80089c6:	d508      	bpl.n	80089da <_printf_i+0x14e>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	6861      	ldr	r1, [r4, #4]
 80089cc:	4299      	cmp	r1, r3
 80089ce:	bfde      	ittt	le
 80089d0:	2330      	movle	r3, #48	; 0x30
 80089d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089d6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80089da:	1b92      	subs	r2, r2, r6
 80089dc:	6122      	str	r2, [r4, #16]
 80089de:	464b      	mov	r3, r9
 80089e0:	4621      	mov	r1, r4
 80089e2:	4640      	mov	r0, r8
 80089e4:	f8cd a000 	str.w	sl, [sp]
 80089e8:	aa03      	add	r2, sp, #12
 80089ea:	f7ff fedf 	bl	80087ac <_printf_common>
 80089ee:	3001      	adds	r0, #1
 80089f0:	d14c      	bne.n	8008a8c <_printf_i+0x200>
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f6:	b004      	add	sp, #16
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	4834      	ldr	r0, [pc, #208]	; (8008ad0 <_printf_i+0x244>)
 80089fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a02:	680e      	ldr	r6, [r1, #0]
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a0a:	061f      	lsls	r7, r3, #24
 8008a0c:	600e      	str	r6, [r1, #0]
 8008a0e:	d514      	bpl.n	8008a3a <_printf_i+0x1ae>
 8008a10:	07d9      	lsls	r1, r3, #31
 8008a12:	bf44      	itt	mi
 8008a14:	f043 0320 	orrmi.w	r3, r3, #32
 8008a18:	6023      	strmi	r3, [r4, #0]
 8008a1a:	b91d      	cbnz	r5, 8008a24 <_printf_i+0x198>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	f023 0320 	bic.w	r3, r3, #32
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	2310      	movs	r3, #16
 8008a26:	e7af      	b.n	8008988 <_printf_i+0xfc>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	f043 0320 	orr.w	r3, r3, #32
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	2378      	movs	r3, #120	; 0x78
 8008a32:	4828      	ldr	r0, [pc, #160]	; (8008ad4 <_printf_i+0x248>)
 8008a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a38:	e7e3      	b.n	8008a02 <_printf_i+0x176>
 8008a3a:	065e      	lsls	r6, r3, #25
 8008a3c:	bf48      	it	mi
 8008a3e:	b2ad      	uxthmi	r5, r5
 8008a40:	e7e6      	b.n	8008a10 <_printf_i+0x184>
 8008a42:	4616      	mov	r6, r2
 8008a44:	e7bb      	b.n	80089be <_printf_i+0x132>
 8008a46:	680b      	ldr	r3, [r1, #0]
 8008a48:	6826      	ldr	r6, [r4, #0]
 8008a4a:	1d1d      	adds	r5, r3, #4
 8008a4c:	6960      	ldr	r0, [r4, #20]
 8008a4e:	600d      	str	r5, [r1, #0]
 8008a50:	0635      	lsls	r5, r6, #24
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	d501      	bpl.n	8008a5a <_printf_i+0x1ce>
 8008a56:	6018      	str	r0, [r3, #0]
 8008a58:	e002      	b.n	8008a60 <_printf_i+0x1d4>
 8008a5a:	0671      	lsls	r1, r6, #25
 8008a5c:	d5fb      	bpl.n	8008a56 <_printf_i+0x1ca>
 8008a5e:	8018      	strh	r0, [r3, #0]
 8008a60:	2300      	movs	r3, #0
 8008a62:	4616      	mov	r6, r2
 8008a64:	6123      	str	r3, [r4, #16]
 8008a66:	e7ba      	b.n	80089de <_printf_i+0x152>
 8008a68:	680b      	ldr	r3, [r1, #0]
 8008a6a:	1d1a      	adds	r2, r3, #4
 8008a6c:	600a      	str	r2, [r1, #0]
 8008a6e:	681e      	ldr	r6, [r3, #0]
 8008a70:	2100      	movs	r1, #0
 8008a72:	4630      	mov	r0, r6
 8008a74:	6862      	ldr	r2, [r4, #4]
 8008a76:	f000 f82f 	bl	8008ad8 <memchr>
 8008a7a:	b108      	cbz	r0, 8008a80 <_printf_i+0x1f4>
 8008a7c:	1b80      	subs	r0, r0, r6
 8008a7e:	6060      	str	r0, [r4, #4]
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	6123      	str	r3, [r4, #16]
 8008a84:	2300      	movs	r3, #0
 8008a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a8a:	e7a8      	b.n	80089de <_printf_i+0x152>
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	4649      	mov	r1, r9
 8008a90:	4640      	mov	r0, r8
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	47d0      	blx	sl
 8008a96:	3001      	adds	r0, #1
 8008a98:	d0ab      	beq.n	80089f2 <_printf_i+0x166>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	079b      	lsls	r3, r3, #30
 8008a9e:	d413      	bmi.n	8008ac8 <_printf_i+0x23c>
 8008aa0:	68e0      	ldr	r0, [r4, #12]
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	4298      	cmp	r0, r3
 8008aa6:	bfb8      	it	lt
 8008aa8:	4618      	movlt	r0, r3
 8008aaa:	e7a4      	b.n	80089f6 <_printf_i+0x16a>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4632      	mov	r2, r6
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	47d0      	blx	sl
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d09b      	beq.n	80089f2 <_printf_i+0x166>
 8008aba:	3501      	adds	r5, #1
 8008abc:	68e3      	ldr	r3, [r4, #12]
 8008abe:	9903      	ldr	r1, [sp, #12]
 8008ac0:	1a5b      	subs	r3, r3, r1
 8008ac2:	42ab      	cmp	r3, r5
 8008ac4:	dcf2      	bgt.n	8008aac <_printf_i+0x220>
 8008ac6:	e7eb      	b.n	8008aa0 <_printf_i+0x214>
 8008ac8:	2500      	movs	r5, #0
 8008aca:	f104 0619 	add.w	r6, r4, #25
 8008ace:	e7f5      	b.n	8008abc <_printf_i+0x230>
 8008ad0:	08008db9 	.word	0x08008db9
 8008ad4:	08008dca 	.word	0x08008dca

08008ad8 <memchr>:
 8008ad8:	4603      	mov	r3, r0
 8008ada:	b510      	push	{r4, lr}
 8008adc:	b2c9      	uxtb	r1, r1
 8008ade:	4402      	add	r2, r0
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	d101      	bne.n	8008aea <memchr+0x12>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e003      	b.n	8008af2 <memchr+0x1a>
 8008aea:	7804      	ldrb	r4, [r0, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	428c      	cmp	r4, r1
 8008af0:	d1f6      	bne.n	8008ae0 <memchr+0x8>
 8008af2:	bd10      	pop	{r4, pc}

08008af4 <memmove>:
 8008af4:	4288      	cmp	r0, r1
 8008af6:	b510      	push	{r4, lr}
 8008af8:	eb01 0402 	add.w	r4, r1, r2
 8008afc:	d902      	bls.n	8008b04 <memmove+0x10>
 8008afe:	4284      	cmp	r4, r0
 8008b00:	4623      	mov	r3, r4
 8008b02:	d807      	bhi.n	8008b14 <memmove+0x20>
 8008b04:	1e43      	subs	r3, r0, #1
 8008b06:	42a1      	cmp	r1, r4
 8008b08:	d008      	beq.n	8008b1c <memmove+0x28>
 8008b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b12:	e7f8      	b.n	8008b06 <memmove+0x12>
 8008b14:	4601      	mov	r1, r0
 8008b16:	4402      	add	r2, r0
 8008b18:	428a      	cmp	r2, r1
 8008b1a:	d100      	bne.n	8008b1e <memmove+0x2a>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b26:	e7f7      	b.n	8008b18 <memmove+0x24>

08008b28 <_free_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	d043      	beq.n	8008bb8 <_free_r+0x90>
 8008b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b34:	1f0c      	subs	r4, r1, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bfb8      	it	lt
 8008b3a:	18e4      	addlt	r4, r4, r3
 8008b3c:	f000 f8d0 	bl	8008ce0 <__malloc_lock>
 8008b40:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <_free_r+0x94>)
 8008b42:	6813      	ldr	r3, [r2, #0]
 8008b44:	4610      	mov	r0, r2
 8008b46:	b933      	cbnz	r3, 8008b56 <_free_r+0x2e>
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	6014      	str	r4, [r2, #0]
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b52:	f000 b8cb 	b.w	8008cec <__malloc_unlock>
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	d90a      	bls.n	8008b70 <_free_r+0x48>
 8008b5a:	6821      	ldr	r1, [r4, #0]
 8008b5c:	1862      	adds	r2, r4, r1
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	bf01      	itttt	eq
 8008b62:	681a      	ldreq	r2, [r3, #0]
 8008b64:	685b      	ldreq	r3, [r3, #4]
 8008b66:	1852      	addeq	r2, r2, r1
 8008b68:	6022      	streq	r2, [r4, #0]
 8008b6a:	6063      	str	r3, [r4, #4]
 8008b6c:	6004      	str	r4, [r0, #0]
 8008b6e:	e7ed      	b.n	8008b4c <_free_r+0x24>
 8008b70:	461a      	mov	r2, r3
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	b10b      	cbz	r3, 8008b7a <_free_r+0x52>
 8008b76:	42a3      	cmp	r3, r4
 8008b78:	d9fa      	bls.n	8008b70 <_free_r+0x48>
 8008b7a:	6811      	ldr	r1, [r2, #0]
 8008b7c:	1850      	adds	r0, r2, r1
 8008b7e:	42a0      	cmp	r0, r4
 8008b80:	d10b      	bne.n	8008b9a <_free_r+0x72>
 8008b82:	6820      	ldr	r0, [r4, #0]
 8008b84:	4401      	add	r1, r0
 8008b86:	1850      	adds	r0, r2, r1
 8008b88:	4283      	cmp	r3, r0
 8008b8a:	6011      	str	r1, [r2, #0]
 8008b8c:	d1de      	bne.n	8008b4c <_free_r+0x24>
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	4401      	add	r1, r0
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	6053      	str	r3, [r2, #4]
 8008b98:	e7d8      	b.n	8008b4c <_free_r+0x24>
 8008b9a:	d902      	bls.n	8008ba2 <_free_r+0x7a>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	e7d4      	b.n	8008b4c <_free_r+0x24>
 8008ba2:	6820      	ldr	r0, [r4, #0]
 8008ba4:	1821      	adds	r1, r4, r0
 8008ba6:	428b      	cmp	r3, r1
 8008ba8:	bf01      	itttt	eq
 8008baa:	6819      	ldreq	r1, [r3, #0]
 8008bac:	685b      	ldreq	r3, [r3, #4]
 8008bae:	1809      	addeq	r1, r1, r0
 8008bb0:	6021      	streq	r1, [r4, #0]
 8008bb2:	6063      	str	r3, [r4, #4]
 8008bb4:	6054      	str	r4, [r2, #4]
 8008bb6:	e7c9      	b.n	8008b4c <_free_r+0x24>
 8008bb8:	bd38      	pop	{r3, r4, r5, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000528 	.word	0x20000528

08008bc0 <_malloc_r>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	1ccd      	adds	r5, r1, #3
 8008bc4:	f025 0503 	bic.w	r5, r5, #3
 8008bc8:	3508      	adds	r5, #8
 8008bca:	2d0c      	cmp	r5, #12
 8008bcc:	bf38      	it	cc
 8008bce:	250c      	movcc	r5, #12
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	db01      	blt.n	8008bda <_malloc_r+0x1a>
 8008bd6:	42a9      	cmp	r1, r5
 8008bd8:	d903      	bls.n	8008be2 <_malloc_r+0x22>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	6033      	str	r3, [r6, #0]
 8008bde:	2000      	movs	r0, #0
 8008be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be2:	f000 f87d 	bl	8008ce0 <__malloc_lock>
 8008be6:	4921      	ldr	r1, [pc, #132]	; (8008c6c <_malloc_r+0xac>)
 8008be8:	680a      	ldr	r2, [r1, #0]
 8008bea:	4614      	mov	r4, r2
 8008bec:	b99c      	cbnz	r4, 8008c16 <_malloc_r+0x56>
 8008bee:	4f20      	ldr	r7, [pc, #128]	; (8008c70 <_malloc_r+0xb0>)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	b923      	cbnz	r3, 8008bfe <_malloc_r+0x3e>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 f862 	bl	8008cc0 <_sbrk_r>
 8008bfc:	6038      	str	r0, [r7, #0]
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4630      	mov	r0, r6
 8008c02:	f000 f85d 	bl	8008cc0 <_sbrk_r>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d123      	bne.n	8008c52 <_malloc_r+0x92>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	f000 f86c 	bl	8008cec <__malloc_unlock>
 8008c14:	e7e3      	b.n	8008bde <_malloc_r+0x1e>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	1b5b      	subs	r3, r3, r5
 8008c1a:	d417      	bmi.n	8008c4c <_malloc_r+0x8c>
 8008c1c:	2b0b      	cmp	r3, #11
 8008c1e:	d903      	bls.n	8008c28 <_malloc_r+0x68>
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	441c      	add	r4, r3
 8008c24:	6025      	str	r5, [r4, #0]
 8008c26:	e004      	b.n	8008c32 <_malloc_r+0x72>
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	42a2      	cmp	r2, r4
 8008c2c:	bf0c      	ite	eq
 8008c2e:	600b      	streq	r3, [r1, #0]
 8008c30:	6053      	strne	r3, [r2, #4]
 8008c32:	4630      	mov	r0, r6
 8008c34:	f000 f85a 	bl	8008cec <__malloc_unlock>
 8008c38:	f104 000b 	add.w	r0, r4, #11
 8008c3c:	1d23      	adds	r3, r4, #4
 8008c3e:	f020 0007 	bic.w	r0, r0, #7
 8008c42:	1ac2      	subs	r2, r0, r3
 8008c44:	d0cc      	beq.n	8008be0 <_malloc_r+0x20>
 8008c46:	1a1b      	subs	r3, r3, r0
 8008c48:	50a3      	str	r3, [r4, r2]
 8008c4a:	e7c9      	b.n	8008be0 <_malloc_r+0x20>
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	6864      	ldr	r4, [r4, #4]
 8008c50:	e7cc      	b.n	8008bec <_malloc_r+0x2c>
 8008c52:	1cc4      	adds	r4, r0, #3
 8008c54:	f024 0403 	bic.w	r4, r4, #3
 8008c58:	42a0      	cmp	r0, r4
 8008c5a:	d0e3      	beq.n	8008c24 <_malloc_r+0x64>
 8008c5c:	1a21      	subs	r1, r4, r0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f000 f82e 	bl	8008cc0 <_sbrk_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d1dd      	bne.n	8008c24 <_malloc_r+0x64>
 8008c68:	e7cf      	b.n	8008c0a <_malloc_r+0x4a>
 8008c6a:	bf00      	nop
 8008c6c:	20000528 	.word	0x20000528
 8008c70:	2000052c 	.word	0x2000052c

08008c74 <_realloc_r>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	4607      	mov	r7, r0
 8008c78:	4614      	mov	r4, r2
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	b921      	cbnz	r1, 8008c88 <_realloc_r+0x14>
 8008c7e:	4611      	mov	r1, r2
 8008c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c84:	f7ff bf9c 	b.w	8008bc0 <_malloc_r>
 8008c88:	b922      	cbnz	r2, 8008c94 <_realloc_r+0x20>
 8008c8a:	f7ff ff4d 	bl	8008b28 <_free_r>
 8008c8e:	4625      	mov	r5, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c94:	f000 f830 	bl	8008cf8 <_malloc_usable_size_r>
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d20f      	bcs.n	8008cbc <_realloc_r+0x48>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff ff8e 	bl	8008bc0 <_malloc_r>
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0f2      	beq.n	8008c90 <_realloc_r+0x1c>
 8008caa:	4631      	mov	r1, r6
 8008cac:	4622      	mov	r2, r4
 8008cae:	f7ff fbeb 	bl	8008488 <memcpy>
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff ff37 	bl	8008b28 <_free_r>
 8008cba:	e7e9      	b.n	8008c90 <_realloc_r+0x1c>
 8008cbc:	4635      	mov	r5, r6
 8008cbe:	e7e7      	b.n	8008c90 <_realloc_r+0x1c>

08008cc0 <_sbrk_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4d05      	ldr	r5, [pc, #20]	; (8008cdc <_sbrk_r+0x1c>)
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f7f7 fe96 	bl	80009fc <_sbrk>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_sbrk_r+0x1a>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_sbrk_r+0x1a>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	2000150c 	.word	0x2000150c

08008ce0 <__malloc_lock>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__malloc_lock+0x8>)
 8008ce2:	f000 b811 	b.w	8008d08 <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20001514 	.word	0x20001514

08008cec <__malloc_unlock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_unlock+0x8>)
 8008cee:	f000 b80c 	b.w	8008d0a <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20001514 	.word	0x20001514

08008cf8 <_malloc_usable_size_r>:
 8008cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cfc:	1f18      	subs	r0, r3, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfbc      	itt	lt
 8008d02:	580b      	ldrlt	r3, [r1, r0]
 8008d04:	18c0      	addlt	r0, r0, r3
 8008d06:	4770      	bx	lr

08008d08 <__retarget_lock_acquire_recursive>:
 8008d08:	4770      	bx	lr

08008d0a <__retarget_lock_release_recursive>:
 8008d0a:	4770      	bx	lr

08008d0c <_init>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr

08008d18 <_fini>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr
